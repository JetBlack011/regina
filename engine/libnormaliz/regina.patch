diff --git a/engine/libnormaliz/nmz_config.h b/engine/libnormaliz/nmz_config.h
index 9f86902df..ac81876b3 100644
--- a/engine/libnormaliz/nmz_config.h
+++ b/engine/libnormaliz/nmz_config.h
@@ -10,11 +10,11 @@
 #undef NMZ_FLINT
 #undef NMZ_COCOA
 
-#define ENFNORMALIZ
-#define NMZ_HASHLIBRARY
-#define NMZ_NAUTY
-#define NMZ_NAUTYNAUTY
-#define NMZ_NAUTY_TLS
-#define NMZ_FLINT
-#define NMZ_COCOA
-#define NORMALIZ_USE_DLL
+// #define ENFNORMALIZ
+// #define NMZ_HASHLIBRARY
+// #define NMZ_NAUTY
+// #define NMZ_NAUTYNAUTY
+// #define NMZ_NAUTY_TLS
+// #define NMZ_FLINT
+// #define NMZ_COCOA
+// #define NORMALIZ_USE_DLL
diff --git a/engine/libnormaliz/vector_operations.h b/engine/libnormaliz/vector_operations.h
index 4b18c8ad8..f3e1da88d 100644
--- a/engine/libnormaliz/vector_operations.h
+++ b/engine/libnormaliz/vector_operations.h
@@ -151,7 +151,7 @@ inline vector<key_t> conjugate_perm(const vector<key_t>& p, const vector<key_t>&
 
     vector<int> inv_k(p.size(), -1);
     for (size_t i = 0; i < k.size(); ++i) {
-        inv_k[k[i]] = i;
+        inv_k[k[i]] = static_cast<int>(i);
     }
     vector<key_t> conj(k.size());
     for (size_t i = 0; i < k.size(); ++i) {
@@ -975,14 +975,14 @@ inline void v_bool_entry_swap(vector<bool>& v, size_t i, size_t j) {
 inline vector<key_t> identity_key(size_t n) {
     vector<key_t> key(n);
     for (size_t k = 0; k < n; ++k)
-        key[k] = k;
+        key[k] = static_cast<key_t>(k);
     return key;
 }
 
 inline vector<key_t> reverse_key(size_t n) {
     vector<key_t> key(n);
     for (size_t k = 0; k < n; ++k)
-        key[k] = (n - 1) - k;
+        key[k] = static_cast<key_t>((n - 1) - k);
     return key;
 }
 
@@ -1205,7 +1205,7 @@ inline vector<key_t> bitset_to_key(const dynamic_bitset& val) {
     vector<key_t> ret;
     for (size_t i = 0; i < val.size(); ++i)
         if (val[i])
-            ret.push_back(i);
+            ret.push_back(static_cast<key_t>(i));
     return ret;
 }
 
diff --git a/engine/libnormaliz/automorph.cpp b/engine/libnormaliz/automorph.cpp
index ad19e692c..c2edb1af3 100644
--- a/engine/libnormaliz/automorph.cpp
+++ b/engine/libnormaliz/automorph.cpp
@@ -1314,7 +1314,7 @@ vector<vector<key_t> > orbits(const vector<vector<key_t> >& Perms, size_t N) {
     if (Perms.size() == 0) {  // each element is its own orbit
         Orbits.reserve(N);
         for (size_t i = 0; i < N; ++i)
-            Orbits.push_back(vector<key_t>(1, i));
+            Orbits.push_back(vector<key_t>(1, static_cast<key_t>(i)));
         return Orbits;
     }
     vector<bool> InOrbit(N, false);
@@ -1322,7 +1322,7 @@ vector<vector<key_t> > orbits(const vector<vector<key_t> >& Perms, size_t N) {
         if (InOrbit[i])
             continue;
         vector<key_t> NewOrbit;
-        NewOrbit.push_back(i);
+        NewOrbit.push_back(static_cast<key_t>(i));
         InOrbit[i] = true;
         for (size_t j = 0; j < NewOrbit.size(); ++j) {
             for (const auto& Perm : Perms) {
@@ -1347,7 +1347,7 @@ vector<vector<key_t> > convert_to_orbits(const vector<key_t>& raw_orbits) {
     for (key_t i = 0; i < raw_orbits.size(); ++i) {
         if (raw_orbits[i] == i) {
             orbits.push_back(vector<key_t>(1, i));
-            key[i] = orbits.size() - 1;
+            key[i] = static_cast<key_t>(orbits.size() - 1);
         }
         else {
             orbits[key[raw_orbits[i]]].push_back(i);
@@ -1367,14 +1367,14 @@ vector<vector<key_t> > cycle_decomposition(vector<key_t> perm, bool with_fixed_p
         if (perm[i] == i) {
             if (!with_fixed_points)
                 continue;
-            vector<key_t> cycle(1, i);
+            vector<key_t> cycle(1, static_cast<key_t>(i));
             in_cycle[i] = true;
             dec.push_back(cycle);
             continue;
         }
         in_cycle[i] = true;
-        key_t next = i;
-        vector<key_t> cycle(1, i);
+        key_t next = static_cast<key_t>(i);
+        vector<key_t> cycle(1, static_cast<key_t>(i));
         while (true) {
             next = perm[next];
             if (next == i)
diff --git a/engine/libnormaliz/matrix.cpp b/engine/libnormaliz/matrix.cpp
index 6b325d607..4bebfdc3a 100644
--- a/engine/libnormaliz/matrix.cpp
+++ b/engine/libnormaliz/matrix.cpp
@@ -517,7 +517,7 @@ template <typename Integer>
 Matrix<Integer> Matrix<Integer>::submatrix(const vector<bool>& rows) const {
     assert(rows.size() == nr);
     size_t size = 0;
-    for (const auto& row : rows) {
+    for (bool row : rows) {
         if (row) {
             size++;
         }
