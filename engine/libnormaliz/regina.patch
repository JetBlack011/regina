diff --git a/engine/libnormaliz/nmz_config.h b/engine/libnormaliz/nmz_config.h
index 9f86902df..ac81876b3 100644
--- a/engine/libnormaliz/nmz_config.h
+++ b/engine/libnormaliz/nmz_config.h
@@ -10,11 +10,11 @@
 #undef NMZ_FLINT
 #undef NMZ_COCOA
 
-#define ENFNORMALIZ
-#define NMZ_HASHLIBRARY
-#define NMZ_NAUTY
-#define NMZ_NAUTYNAUTY
-#define NMZ_NAUTY_TLS
-#define NMZ_FLINT
-#define NMZ_COCOA
-#define NORMALIZ_USE_DLL
+// #define ENFNORMALIZ
+// #define NMZ_HASHLIBRARY
+// #define NMZ_NAUTY
+// #define NMZ_NAUTYNAUTY
+// #define NMZ_NAUTY_TLS
+// #define NMZ_FLINT
+// #define NMZ_COCOA
+// #define NORMALIZ_USE_DLL
diff --git a/engine/libnormaliz/collection.h b/engine/libnormaliz/collection.h
index 81dfe2ce7..e4a6ee651 100644
--- a/engine/libnormaliz/collection.h
+++ b/engine/libnormaliz/collection.h
@@ -62,7 +62,7 @@ class MiniCone {
 
     void print() const;
 
-    MiniCone<Integer>(const vector<key_t> GKeys, const Integer& mult, ConeCollection<Integer>& Coll);
+    MiniCone(const vector<key_t> GKeys, const Integer& mult, ConeCollection<Integer>& Coll);
 };
 
 template <typename Integer>
diff --git a/engine/libnormaliz/binomial.cpp b/engine/libnormaliz/binomial.cpp
index b9805e210..c99297ab9 100644
--- a/engine/libnormaliz/binomial.cpp
+++ b/engine/libnormaliz/binomial.cpp
@@ -217,14 +217,6 @@ void binomial::clear() {
 //     return std::accumulate(neg_vec.begin(), neg_vec.end(), 0);
 // }
 
-bool binomial::operator ==(const exponent_vec& rhs) const {
-    // for (size_t i = 0; i < size(); ++i)
-    //     if ((*this)[i] != rhs[i])
-    //         return false;
-    // return true;
-    return (static_cast<exponent_vec>(*this) == rhs);
-}
-
 binomial binomial::operator -(const binomial& rhs) const {
     assert(size() == rhs.size());
     binomial w(size());
diff --git a/engine/libnormaliz/binomial.h b/engine/libnormaliz/binomial.h
index 64d651e33..8138c0e5a 100644
--- a/engine/libnormaliz/binomial.h
+++ b/engine/libnormaliz/binomial.h
@@ -132,7 +132,6 @@ public:
     void operator -=(const binomial& rhs);
     void operator *=(const exponent_t rhs); // scalar multiplication
 
-    bool operator ==(const exponent_vec& rhs) const;
     bool operator |(const exponent_vec& rhs) const;
 
     // General member functions:
diff --git a/engine/libnormaliz/vector_operations.h b/engine/libnormaliz/vector_operations.h
index 1f436109c..b472b3cad 100644
--- a/engine/libnormaliz/vector_operations.h
+++ b/engine/libnormaliz/vector_operations.h
@@ -1447,6 +1447,13 @@ void v_cyclic_shift_right( T& vec, size_t col){
     vec[0] = dummy;
 }
 
+// GCC gives the following warning when setting vec[i] = vec[i+1]:
+//   warning: 'void* __builtin_memmove(void*, const void*, long unsigned int)'
+//   reading <very large number> or more bytes from a region of size
+//   <very large number minus two> [-Wstringop-overread]
+// Here T = std::vector<short unsigned int>.
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wstringop-overread"
 template <typename T>
 void v_cyclic_shift_left( T& vec, size_t col){
     if(vec.size() == 0)
@@ -1457,6 +1464,7 @@ void v_cyclic_shift_left( T& vec, size_t col){
         vec[i] = vec[i+1];
     vec[col] = dummy;
 }
+#pragma GCC diagnostic pop
 
 template <typename T>
 T v_permute_coordinates(const T& vec, const vector<key_t>& perm){
