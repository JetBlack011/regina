
/**************************************************************************
 *                                                                        *
 *  Regina - A normal surface theory calculator                           *
 *  CORBA interface definition for computational engine                   *
 *                                                                        *
 *  Copyright (c) 1999-2001, Ben Burton                                   *
 *  For further details contact Ben Burton (benb@acm.org).                *
 *                                                                        *
 *  This program is free software; you can redistribute it and/or         *
 *  modify it under the terms of the GNU General Public License as        *
 *  published by the Free Software Foundation; either version 2 of the    *
 *  License, or (at your option) any later version.                       *
 *                                                                        *
 *  This program is distributed in the hope that it will be useful, but   *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *
 *  General Public License for more details.                              *
 *                                                                        *
 *  You should have received a copy of the GNU General Public             *
 *  License along with this program; if not, write to the Free            *
 *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,        *
 *  MA 02111-1307, USA.                                                   *
 *                                                                        *
 **************************************************************************/

/* end stub */

#ifndef __NTRIANGULATIONSKELETON_IDL
#define __NTRIANGULATIONSKELETON_IDL

#include "ShareableObject.idl"

module Regina {
    module Triangulation {
        interface NVertex;
        interface NEdge;
        interface NFace;
        interface NTetrahedron;
        interface NComponent;
        interface NBoundaryComponent;

        interface NVertex : ShareableObject {
            NComponent getComponent();
            NBoundaryComponent getBoundaryComponent();

            long getLink();
            boolean isLinkClosed();
            boolean isIdeal();
            boolean isBoundary();
            boolean isStandard();
            boolean isLinkOrientable();
            long getLinkEulerCharacteristic();

            long getNumberOfEmbeddings();
            void getEmbedding(out NTetrahedron tet, out long vertex,
                in long index);
        };

        interface NEdge : ShareableObject {
            NComponent getComponent();
            NBoundaryComponent getBoundaryComponent();

            boolean isBoundary();
            boolean isValid();

            long getNumberOfEmbeddings();
            void getEmbedding(out NTetrahedron tet, out long edge,
                in long index);
        };

        interface NFace : ShareableObject {
            NComponent getComponent();
            NBoundaryComponent getBoundaryComponent();

            boolean isBoundary();

            long getNumberOfEmbeddings();
            void getEmbedding(out NTetrahedron tet, out long face,
                in long index);
        };

        interface NTetrahedron : ShareableObject {
            NTetrahedron getAdjacentTetrahedron(in long face);
            char getAdjacentTetrahedronGluing(in long face);
            long getAdjacentFace(in long face);
            boolean hasBoundary();

            Regina::Triangulation::NComponent getComponent();

            NVertex getVertex(in long vertex);
            NEdge getEdge(in long edge);
            NFace getFace(in long face);

            char getEdgeMapping(in long edge);
            char getFaceMapping(in long face);

            void joinTo(in long myFace, in NTetrahedron you, in char gluing);
            NTetrahedron unjoin(in long myFace);
            void isolate();

            string getDescription();
            void setDescription(in string description);
        };

        interface NComponent : ShareableObject {
            boolean isIdeal();
            boolean isOrientable();
            boolean isClosed();

            long getNumberOfTetrahedra();
            long getNumberOfFaces();
            long getNumberOfEdges();
            long getNumberOfVertices();
            long getNumberOfBoundaryComponents();

            NTetrahedron getTetrahedron(in long index);
            NFace getFace(in long index);
            NEdge getEdge(in long index);
            NVertex getVertex(in long index);
            NBoundaryComponent getBoundaryComponent(in long index);
        };

        interface NBoundaryComponent : ShareableObject {
            long getEulerCharacteristic();
            boolean isIdeal();
            boolean isOrientable();

            long getNumberOfFaces();
            long getNumberOfEdges();
            long getNumberOfVertices();

            NFace getFace(in long index);
            NEdge getEdge(in long index);
            NVertex getVertex(in long index);
        };
    };
};

#endif

