
/**************************************************************************
 *                                                                        *
 *  Regina - A Normal Surface Theory Calculator                           *
 *  CORBA Interface Definition                                            *
 *                                                                        *
 *  Copyright (c) 1999-2001, Ben Burton                                   *
 *  For further details contact Ben Burton (benb@acm.org).                *
 *                                                                        *
 *  This program is free software; you can redistribute it and/or         *
 *  modify it under the terms of the GNU General Public License as        *
 *  published by the Free Software Foundation; either version 2 of the    *
 *  License, or (at your option) any later version.                       *
 *                                                                        *
 *  This program is distributed in the hope that it will be useful, but   *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *
 *  General Public License for more details.                              *
 *                                                                        *
 *  You should have received a copy of the GNU General Public             *
 *  License along with this program; if not, write to the Free            *
 *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,        *
 *  MA 02111-1307, USA.                                                   *
 *                                                                        *
 **************************************************************************/

/* end stub */

#ifndef __NPACKET_IDL
#define __NPACKET_IDL

#include "ShareableObject.idl"

module Regina {
    module Packet {
        interface NPacket : ShareableObject {
            long getPacketType();
            string getPacketName();
            string getPacketLabel();
            void setPacketLabel(in string newLabel);
            string getFullName();

            NPacket getFirstTreeChild();
            NPacket getLastTreeChild();
            NPacket getPrevTreeSibling();
            NPacket getNextTreeSibling();
            NPacket getTreeParent();
            NPacket getTreeMatriarch();
            void insertChildFirst(in NPacket child);
            void insertChildLast(in NPacket child);
            void insertChildAfter(in NPacket newChild, in NPacket prevChild);
            void makeOrphan();
            void swapWithNextSibling();

            NPacket nextTreePacket_();
            NPacket firstTreePacket(in string type);
            NPacket nextTreePacket_string(in string type);
            NPacket findPacketLabel(in string label);
            string makeUniqueLabel(in string base);
            boolean makeUniqueLabels(in NPacket reference);

            long levelsDownTo(in NPacket descendant);
            long levelsUpTo(in NPacket ancestor);
            boolean isGrandparentOf(in NPacket descendant);
            long getNumberOfChildren();
            long getNumberOfDescendants();
            long getTotalTreeSize();

            boolean dependsOnParent();
            boolean isPacketEditable();
            NPacket clonePacket(in boolean cloneDescendants, in boolean end);
        };
    };
};

#endif

