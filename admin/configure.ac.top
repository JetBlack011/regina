dnl
dnl    Regina - A Normal Surface Theory Calculator
dnl    Configure Script Generator
dnl
dnl    Copyright (c) 2002-2003, Ben Burton
dnl    For further details contact Ben Burton (bab@debian.org).
dnl
dnl    Process this file with autoconf to produce a configure script.
dnl    Autoconf version >= 2.50 is required.
dnl
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU General Public License as
dnl    published by the Free Software Foundation; either version 2 of the
dnl    License, or (at your option) any later version.
dnl
dnl    This file is distributed in the hope that it will be useful, but
dnl    WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    General Public License for more details.
dnl
dnl    You should have received a copy of the GNU General Public
dnl    License along with this program; if not, write to the Free
dnl    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
dnl    MA 02111-1307, USA.
dnl

###########################################################
#
# Initialisation.
#
###########################################################

AC_INIT(Regina, [4.0], [regina-user@lists.sourceforge.net], regina)
AC_PREREQ(2.50)
AC_CONFIG_AUX_DIR(admin)
AC_CONFIG_SRCDIR(engine/engine/triangulation/ntriangulation.cpp)

# Recommended by the KDE folks to avoid ksh/zsh problems.
unset CDPATH

# This will run AC_CANONICAL_{BUILD,HOST,TARGET}, all of which replace
# AC_CANONICAL_SYSTEM, according to the autoconf docs.
AC_CANONICAL_TARGET

# Transform program names.
AC_ARG_PROGRAM

# The KDE folks say that we should not do the automake initialisation
# until this point.
AM_INIT_AUTOMAKE(regina, [4.0])
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(engine/engine/regina-config.h)

# Do we need to install using a non-standard package name?
AC_ARG_VAR(PKGNAME, [the package name to install as (default: regina)])
if test "x" != "x$PKGNAME"; then
  AC_SUBST(PACKAGE, [$PKGNAME])
fi

# Extract major and minor package version numbers.
REGINA_PACKAGE_VERSIONS

###########################################################
#
# Check for C/C++ tools.
#
###########################################################

AC_CHECK_COMPILERS
KDE_PROG_LIBTOOL
LIBTOOL="$LIBTOOL --silent"
AM_KDE_WITH_NLS

# Set the default language to C++ for subsequent tests.
AC_LANG(C++)

# Before we go further, make sure we have (long long).
AC_CHECK_TYPE([long long], , [
  REGINA_ERR_MISSING([Type (long long)], [the calculation engine])
])

AC_CHECK_PROGS(_UTIL_FIND, [find], none)
if test "$_UTIL_FIND" = "none"; then
  REGINA_ERR_MISSING([The find utility], [the build system])
fi

AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S

###########################################################
#
# Check for compiler characteristics.
#
###########################################################

# Check for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_CHECK_TYPES(__int64)

# Check for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([strtol strtoul])

# Other custom checks.
REGINA_CXX_PARTIAL_SPECIALISATION
REGINA_TYPE_HASH_SET
REGINA_VAR_IOS_NOCREATE
REGINA_LD_ADD_STDCALL_ALIAS
AC_CHECK_KDEMAXPATHLEN

###########################################################
#
# Determine which components the user is disabling.
#
###########################################################

AC_ARG_ENABLE(javaui, AC_HELP_STRING([--enable-javaui],
    [build the Java user interface [[default=yes]]]), [
  if test "$enableval" = "no"; then
    REGINA_DO_NOT_COMPILE([JAVAUI DOCSJAVAUI DOCSJAR ENGINEJNI JNIHDR])
  fi
])
AC_ARG_ENABLE(kdeui, AC_HELP_STRING([--enable-kdeui],
    [build the KDE user interface [[default=yes]]]), [
  if test "$enableval" = "no"; then
    REGINA_DO_NOT_COMPILE([KDEUI])
  fi
])
AC_ARG_ENABLE(docs, AC_HELP_STRING([--enable-docs],
    [build the Regina documentation [[default=yes]]]), [
  if test "$enableval" = "no"; then
    REGINA_DO_NOT_COMPILE([DOCSENGINE DOCSJAVAUI DOCSHTML DOCSMAN DOCSJAR])
  fi
])

###########################################################
#
# Check for Java tools.
#
###########################################################

REGINA_PROG_JAVAC([JAVAUI DOCSJAVAUI DOCSJAR], [the Java user interface])

REGINA_PROG_OPTIONAL([fastjar jar], JAR,
  [Jar command for creating Java JAR archives], [JAVAUI DOCSJAVAUI DOCSJAR],
  [the Java user interface])

REGINA_PROG_OPTIONAL([gcjh gcjh-3.1 kaffeh javah], JAVAH,
  [Javah command for creating JNI headers], [JNIHDR],
  [the (unnecessary) JNI headers])

###########################################################
#
# Check for documentation tools.
#
###########################################################

REGINA_PROG_OPTIONAL(doxygen, DOXYGEN,
  [Doxygen command for C++ source documentation], [DOCSENGINE DOCSJAR],
  [calculation engine documentation])

AC_ARG_VAR(DOT, [Dot command for drawing directed graphs])
AC_CHECK_PROGS(DOT, dot, none)
if test "$DOT" = "none"; then
  AC_SUBST(HAVE_DOT, NO)
  AC_SUBST(DOT, "\$(top_srcdir)/admin/missing dot")
  REGINA_WARN_MISSING(dot, [graphs in the engine documentation])
else
  AC_SUBST(HAVE_DOT, YES)
fi

REGINA_PROG_OPTIONAL(docbook2man, DOCBOOK2MAN,
  [Command for converting SGML to man pages], [DOCSMAN], [the man pages])

REGINA_PROG_OPTIONAL(jade, JADE,
  [Jade command for converting SGML to HTML],
  [DOCSHTML DOCSPDF DOCSRTF DOCSJAR], [the reference manual])

REGINA_PROG_OPTIONAL(pdfjadetex, PDFJADETEX,
  [JadeTeX command for converting TeX to PDF], DOCSPDF,
  [the PDF reference manual])

REGINA_PROG_OPTIONAL(javadoc, JAVADOC,
  [JavaDoc command for Java source documentation], [DOCSJAVAUI DOCSJAR],
  [Java UI class documentation])

###########################################################
#
# Check for mandatory headers and libraries.
#
###########################################################

REGINA_HEADER_REQUIRED(zlib.h, [the calculation engine])
REGINA_LIB_REQUIRED(z, zlibVersion, [the calculation engine])

# It seems libm is required by libxml2 when doing static linking.
REGINA_LIB_REQUIRED(m, log10, [the calculation engine])

REGINA_HEADER_REQUIRED(gmp.h, [the calculation engine])
REGINA_LIB_REQUIRED(gmp, __gmpz_init, [the calculation engine])

ACX_PTHREAD([
  LIBS="$PTHREAD_LIBS $LIBS"
  CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
], [
  REGINA_ERR_MISSING([POSIX pthread support], [the calculation engine])
])

# The libxml2 check seems to need to be done under C, not C++.
AC_LANG_PUSH(C)
AM_PATH_XML2([2.0.0], , [
  REGINA_ERR_MISSING([Library libxml2], [the calculation engine])
])
AC_LANG_POP(C)

###########################################################
#
# Check for optional headers and libraries.
#
###########################################################

REGINA_HEADER_OPTIONAL(popt.h, UTILS, [command-line utilities])
REGINA_LIB_OPTIONAL(popt, poptGetContext, UTILS_LIBS, UTILS,
  [command-line utilities])

AM_PATH_CPPUNIT([1.8.0], , [
  REGINA_WARN_MISSING([Library cppunit], [the test suite])
  REGINA_DO_NOT_COMPILE(TESTSUITE)
])

REGINA_SHOULD_BUILD_INTERNAL(KDEUI)
if test "$should_build" = "yes"; then
  AC_PATH_KDE
fi

REGINA_SHOULD_BUILD_INTERNAL(JAVAUI)
if test "$should_build" = "yes"; then
  REGINA_LIB_JAVA(btools, [org.gjt.btools.Version],
    [JAVAUI DOCSJAVAUI DOCSJAR], [the Java user interface])
  REGINA_LIB_JAVA(jython, [org.python.util.jython],
    [JAVAUI DOCSJAVAUI DOCSJAR], [the Java user interface])
fi

REGINA_HEADER_JNI(ENGINEJNI, [the JNI calculation engine module])

###########################################################
#
# Miscellaneous other headers.
#
###########################################################

AC_HEADER_STDC
AC_CHECK_HEADERS([unistd.h])

###########################################################
#
# Finalise include and library paths.
#
###########################################################

# Includes required by the calculation engine.
ENGINE_INCLUDES="-I\$(top_srcdir)/engine/engine $XML_CFLAGS"
AC_SUBST(ENGINE_INCLUDES)

# Libraries required by the calculation engine.
ENGINE_LIBS="$XML_LIBS"
AC_SUBST(ENGINE_LIBS)

# Additional includes requied by the JNI calculation engine module.
JNI_INCLUDES="-I\$(top_srcdir)/engine/jni $JNI_INCLUDES"
AC_SUBST(JNI_INCLUDES)

# Additional libraries required by the test suite.
TESTSUITE_LIBS="$CPPUNIT_LIBS"
AC_SUBST(TESTSUITE_LIBS)

# Classpath required by the Java user interface.
JAVAUI_CLASSPATH="\$(top_srcdir)/javaui:$CLASSPATH"
REGINA_CLASSPATH_CONVERT(JAVAUI_CLASSPATH)
AC_SUBST(JAVAUI_CLASSPATH)

# Do we wish to statically link the calculation engine into final targets?
__static_final=no
LIB_ENGINE="\$(top_srcdir)/engine/engine/libregina-engine.la"
AC_ARG_ENABLE(static-final, AC_HELP_STRING([--enable-static-final],
    [statically link the calculation engine into final executables and modules [[default=no]]]), [
  if test "$enableval" != "no"; then
    __static_final=yes
    LIB_ENGINE="\$(top_srcdir)/engine/engine/libregina-engine-noinst.la"
  fi
])
AM_CONDITIONAL(STATIC_FINAL, test "$__static_final" = "yes")

# The actual calculation engine library with which to link; note that
# this depends on whether --enable-static-final is being used.
AC_SUBST(LIB_ENGINE)

###########################################################
#
# Decide what should and should not be built.
#
###########################################################

REGINA_SHOULD_BUILD(ENGINE, engine, [the calculation engine library])
REGINA_SHOULD_BUILD(ENGINEJNI, jni, [the JNI calculation engine module])
REGINA_SHOULD_BUILD(KDEUI, kdeui, [the KDE user interface])
REGINA_SHOULD_BUILD(JAVAUI, javaui, [the Java user interface])
REGINA_SHOULD_BUILD(UTILS, utils, [command-line utilities])
REGINA_SHOULD_BUILD(TESTSUITE, testsuite, [the test suite])
REGINA_SHOULD_BUILD(DOCSENGINE, engine, [calculation engine docs])
REGINA_SHOULD_BUILD(DOCSJAVAUI, javaui, [Java user interface docs])
REGINA_SHOULD_BUILD(DOCSHTML, html, [the reference manual])
REGINA_SHOULD_BUILD(DOCSMAN, man, [man pages])
REGINA_SHOULD_BUILD(DOCSJAR, jar, [the documentation jar])

###########################################################
#
# Prepare output files.
#
###########################################################

