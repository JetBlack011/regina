dnl
dnl    Regina - A Normal Surface Theory Calculator
dnl    Configure Script Macros
dnl
dnl    Copyright (c) 2002, Ben Burton
dnl    For further details contact Ben Burton (benb@acm.org).
dnl
dnl    This file is free software; you can redistribute it and/or
dnl    modify it under the terms of the GNU General Public License as
dnl    published by the Free Software Foundation; either version 2 of the
dnl    License, or (at your option) any later version.
dnl
dnl    This file is distributed in the hope that it will be useful, but
dnl    WITHOUT ANY WARRANTY; without even the implied warranty of
dnl    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl    General Public License for more details.
dnl
dnl    You should have received a copy of the GNU General Public
dnl    License along with this program; if not, write to the Free
dnl    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
dnl    MA 02111-1307, USA.
dnl
dnl    Note that this copyright notice applies only to macros beginning
dnl    with REGINA_.  Other macros found in acinclude.m4 have been taken
dnl    from external sources; these macros are stored in separate files
dnl    in the admin/ subdirectory and copyright notices can be found in
dnl    these separate files (and in the comments provided with the macros
dnl    themselves).
dnl

dnl    -----------------------------------------------------------------
dnl
dnl                        Macros written for Regina
dnl
dnl    -----------------------------------------------------------------

dnl
dnl    REGINA_ABS_DIR(DIR)
dnl
dnl    Sets _ABS_DIR to the given directory expressed as an absolute path.
dnl
AC_DEFUN(REGINA_ABS_DIR, [
  _ABS_DIR="`cd "$1" && pwd`"
])

dnl
dnl    REGINA_ABS_DIRNAME(PATH)
dnl
dnl    Sets _ABS_DIRNAME to the directory portion of the given pathname,
dnl    expressed as an absolute path.
dnl
AC_DEFUN(REGINA_ABS_DIRNAME, [
  _ABS_DIRNAME="`AS_DIRNAME([$1])`"
  _ABS_DIRNAME="`cd "$_ABS_DIRNAME" && pwd`"
])

dnl
dnl    REGINA_CLASSPATH_CONVERT(VARIABLE)
dnl
dnl    Converts classpath variable <VARIABLE> to Windows format
dnl    (semicolon-separated, uses Windows filenames) if we're running under
dnl    cygwin.  The given variable should currently be in *nix-format
dnl    (colon-separated, uses *nix filenames).
dnl
dnl    The new variable will be exported to the environment.
dnl
dnl    Example: REGINA_CLASSPATH_CONVERT(CLASSPATH)
dnl
AC_DEFUN(REGINA_CLASSPATH_CONVERT, [
  case "$host_os" in
    *cygwin* )
      cmd="export $1=\"\`cygpath -awp \"\$$1\"\`\""
      eval "$cmd"
      ;;
    * )
      ;;
  esac
])

dnl
dnl    REGINA_CLASSPATH_RESTORE
dnl
dnl    Restores $CLASSPATH to its value when REGINA_CLASSPATH_SAVE was
dnl    last called.  This restored $CLASSPATH is exported to the environment.
dnl
AC_DEFUN(REGINA_CLASSPATH_RESTORE, [
  export CLASSPATH="$regina_old_classpath"
])

dnl
dnl    REGINA_CLASSPATH_SAVE
dnl
dnl    Saves the current value of $CLASSPATH so it can be later restored
dnl    using REGINA_CLASSPATH_RESTORE.
dnl
AC_DEFUN(REGINA_CLASSPATH_SAVE, [
  regina_old_classpath="$CLASSPATH"
])

dnl
dnl    REGINA_CXX_PARTIAL_SPECIALISATION
dnl
dnl    Ensures that the C++ compiler supports partial specialisation.
dnl
dnl    Modified from AC_CXX_PARTIAL_SPECIALIZATION which is
dnl    copyright (c) Luc Maisonobe and licensed under the GPL.
dnl
AC_DEFUN(REGINA_CXX_PARTIAL_SPECIALISATION, [
  AC_MSG_CHECKING([whether the compiler supports partial specialisation])
  AC_LANG_PUSH(C++)
  AC_TRY_COMPILE([
    template<class T, int N> class A            { public : enum e { z = 0 }; };
    template<int N>          class A<double, N> { public : enum e { z = 1 }; };
    template<class T>        class A<T, 2>      { public : enum e { z = 2 }; };
  ], [
    return (A<int,3>::z == 0) && (A<double,3>::z == 1) && (A<float,2>::z == 2);
  ], [
    AC_MSG_RESULT([yes])
  ], [
    AC_MSG_RESULT([no])
    AC_MSG_ERROR([The C++ compiler does not support partial specialisation of templates.])
  ])
  AC_LANG_POP(C++)
])

dnl
dnl    REGINA_DO_NOT_COMPILE
dnl
dnl    Adds the given list of items to $DO_NOT_COMPILE.  Items already
dnl    listed in $DO_NOT_COMPILE will not be added again.
dnl
dnl    Example: REGINA_DO_NOT_COMPILE([DOCSMAN DOCSHTML])
dnl
AC_DEFUN(REGINA_DO_NOT_COMPILE, [
  for item in $1; do
    ruled_out="no"
    for j in $DO_NOT_COMPILE; do
      if test "$j" = "$item"; then
        ruled_out="yes"
        break
      fi
    done
    if test "$ruled_out" = "no"; then
      DO_NOT_COMPILE="$DO_NOT_COMPILE $item"
    fi
  done
])

dnl
dnl    REGINA_ERR_MISSING(MISSING-ITEM, REQUIRED-BY)
dnl
dnl    Quits with an error stating what was missing and which
dnl    build component requires it.
dnl
dnl    Example: REGINA_ERR_MISSING(Library libgmp, [the calculation engine])
dnl
AC_DEFUN(REGINA_ERR_MISSING, [
  AC_MSG_ERROR([[$1 is unavailable; this is needed by $2.]])
])

dnl
dnl    REGINA_FOLLOW_SYMLINKS(PATH)
dnl
dnl    Modified from _ACJNI_FOLLOW_SYMLINKS which is
dnl    copyright (c) Don Anderson and licensed under the GPL.
dnl
dnl    TODO: This macro does *not* deal with relative symlinks correctly.
dnl
dnl    Follows a chain of symlinks beginning with <PATH>, finally setting
dnl    variable _SYMLINKS_FOLLOWED to the real file or directory at the
dnl    end of this chain.
dnl
dnl    Note that <PATH> may be a real file or directory to begin with.
dnl
AC_DEFUN(REGINA_FOLLOW_SYMLINKS, [
  _cur="$1"
  while ls -ld "$_cur" 2> /dev/null | grep " -> " > /dev/null; do
    _slink=`ls -ld "$_cur" | sed 's/^.* -> //'`
    case "$_slink" in
      /* )
        _cur="$_slink"
        ;;
      * )
        # 'X' avoids triggering unwanted echo options.
        _cur=`echo "X$_cur" | sed -e 's/^X//' -e 's:[[^/]]*$::'`"$_slink"
        ;;
    esac
  done
  _SYMLINKS_FOLLOWED="$_cur"
])

dnl
dnl    REGINA_HEADER_JNI(TARGET-LIST, REQUIRED-BY)
dnl
dnl    Based on the ideas in AC_JNI_INCLUDE_DIR which is
dnl    copyright (c) Don Anderson and licensed under the GPL.
dnl
dnl    Checks for the Java JNI headers.
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if the headers cannot be found.
dnl
dnl    This macro will attempt to locate the specific headers corresponding
dnl    to the Java compiler $JAVAC.  A basic compilation test will also
dnl    be done.
dnl
dnl    Configure argument --with-jni is defined.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        JNI_INCLUDES: The compiler flags for including the JNI headers;
dnl                      this is only set if the headers were actually found.
dnl                      If configure argument --with-jni was specified,
dnl                      that value will be used without further testing.
dnl
dnl    Example: REGINA_HEADER_JNI(ENGINEJNI,
dnl                 [the JNI calculation engine module])
dnl
AC_DEFUN(REGINA_HEADER_JNI, [
  AC_ARG_WITH(jni, AC_HELP_STRING([--with-jni=FLAGS],
      [compiler flags for including jni.h (optional)]), [
    JNI_INCLUDES="$with_jni"
  ], [
    JNI_INCLUDES=
  ])
  if test "x$JNI_INCLUDES" = "xno"; then
    REGINA_DO_NOT_COMPILE([$1])
    AC_MSG_WARN([[Option --without-jni has been specified; $2 will not be built.]])
  elif test "x$JNI_INCLUDES" = "x"; then
    # Find the directory that should contain the headers.
    progname=false
    for i in $JAVAC; do progname="$i"; break; done
    AC_PATH_PROG(_real_progname, [$progname], [$JAVAC])

    AC_MSG_CHECKING([for JNI headers])
    REGINA_FOLLOW_SYMLINKS([$_real_progname])
    _JTOPDIR="`AS_DIRNAME([$_SYMLINKS_FOLLOWED])`"
    _JTOPDIR2="`AS_DIRNAME([$_JTOPDIR])`"

    _JINC=none
    for i in "$_JTOPDIR/include" "$_JTOPDIR/Headers" \
        "$_JTOPDIR2/include" "$_JTOPDIR2/Headers"; do
      if test -f "$i/jni.h"; then
        _JINC="$i"
        break
      fi
    done

    if test "x$_JINC" = "xnone"; then
      AC_MSG_RESULT([not found])
      REGINA_DO_NOT_COMPILE([$1])
      AC_MSG_WARN([[The JNI headers are unavailable; $2 will not be built.]])
    else
      _TRIAL_JNI="-I$_JINC"

      # Look for machine-dependent subdirectories.
      for i in "$_JINC"/*; do
        if test -e "$i/jni_md.h"; then
          _TRIAL_JNI="$_TRIAL_JNI -I$i"
          break
        fi
      done

      # Define __int64 as a type we know exists, regardless of whether
      # this is correct.
      echo "#define __int64 long" > conftest.$ac_ext
      echo "#include <jni.h>" >> conftest.$ac_ext
      echo "jobject obj;" >> conftest.$ac_ext
      ac_compile='${CXX-g++} -c $_TRIAL_JNI $CXXFLAGS $CPPFLAGS conftest.$ac_ext'
      if AC_TRY_EVAL(ac_compile); then
        AC_MSG_RESULT([$_TRIAL_JNI])
        JNI_INCLUDES="$_TRIAL_JNI"
      else
        AC_MSG_RESULT([cannot compile])
        REGINA_DO_NOT_COMPILE([$1])
        AC_MSG_WARN([[The JNI headers are unavailable; $2 will not be built.]])
      fi
    fi
  fi
  AC_SUBST(JNI_INCLUDES)
])

dnl
dnl    REGINA_HEADER_OPTIONAL(HEADER, TARGET-LIST, REQUIRED-BY)
dnl
dnl    Checks for the given optional header.
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if the header is missing.
dnl
dnl    Example: REGINA_HEADER_OPTIONAL(popt.h, UTILS, [command-line utilities])
dnl
AC_DEFUN(REGINA_HEADER_OPTIONAL, [
  AC_CHECK_HEADERS([$1], , [
    REGINA_WARN_MISSING([Header $1], [$3])
    REGINA_DO_NOT_COMPILE([$2])
  ])
])

dnl
dnl    REGINA_HEADER_REQUIRED(HEADER, REQUIRED-BY)
dnl
dnl    Checks for the given mandatory header.
dnl    Quits with an error message if the header is missing.
dnl
dnl    Example: REGINA_HEADER_REQUIRED(pthread.h, [the calculation engine])
dnl
AC_DEFUN(REGINA_HEADER_REQUIRED, [
  AC_CHECK_HEADERS([$1], , [
    REGINA_ERR_MISSING([Header $1], [$2])
  ])
])

dnl
dnl    REGINA_LIB_JAVA(LIBNAME, CLASS-IN-LIB, TARGET-LIST, REQUIRED-BY)
dnl
dnl    Checks for the given optional Java library.
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if the library is missing.
dnl    Prepends the library to $CLASSPATH if the library is found.
dnl
dnl    It is assumed that $CLASSPATH is stored in colon-separated *nix-style.
dnl
dnl    Configure argument --with-jardir is defined.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        CLASSPATH: The Java compiler classpath, which is modified as
dnl                   described above.
dnl
dnl    Example: REGINA_LIB_JAVA(jython, [org.python.util.jython],
dnl                 JAVAUI, [the Java user interface])
dnl
AC_DEFUN(REGINA_LIB_JAVA, [
  AC_ARG_WITH(jardir, AC_HELP_STRING([--with-jardir=DIR],
      [search additional directory DIR for external Java library jars (optional)]), [
    _user_libdir="$with_jardir"
  ], [
    _user_libdir=
  ])
  AC_MSG_CHECKING([for native $1 support])
  REGINA_TRY_COMPILE_JAVA([$JAVAC], [$2], [ $2 obj = null; ], [
    AC_MSG_RESULT([yes])
  ], [
    AC_MSG_RESULT([no])
    AC_MSG_CHECKING([for $1 jar])
    found_jar=no
    for _libdir in "`pwd`/jar" "$_user_libdir" /usr/share/java /usr/share/java/jar /usr/local/java /usr/local/java/jar /usr/local/share/java /usr/local/share/java/jar; do
      for jar in "$_libdir/$1.jar" "$_libdir/lib$1.jar" "$_libdir/lib$1-java.jar"; do
        if test -e "$jar"; then
          REGINA_CLASSPATH_SAVE
          export CLASSPATH="$jar:$CLASSPATH"
          REGINA_TRY_COMPILE_JAVA([$JAVAC], [$2], [ $2 obj = null; ], [
            AC_MSG_RESULT([$jar])
            found_jar=yes
            break
          ], [
            REGINA_CLASSPATH_RESTORE
          ])
        fi
      done
      if test "$found_jar" = "yes"; then
        break
      fi
    done
    if test "$found_jar" = "no"; then
      AC_MSG_RESULT([no])
      REGINA_DO_NOT_COMPILE([$3])
      REGINA_WARN_MISSING([Java $1 library], [$4])
    fi
  ])
  AC_SUBST(CLASSPATH)
])

dnl
dnl    REGINA_LIB_OPTIONAL(LIBNAME, FUNCTION-IN-LIB, FLAGSET,
dnl        TARGET-LIST, REQUIRED-BY)
dnl
dnl    Checks for the given optional library.
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if the library is missing.
dnl    Adds -l<LIBNAME> to $<FLAGSET> if the library was found.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        <FLAGSET>: As described above; this is only set if the library
dnl                   was found.
dnl
dnl    Example: REGINA_LIB_OPTIONAL(popt, poptGetContext, UTILS_LIBS,
dnl                 UTILS, [command-line utilities])
dnl
AC_DEFUN(REGINA_LIB_OPTIONAL, [
  AC_CHECK_LIB([$1], [$2], [
    $3="-l$1"
    AC_SUBST([$3])
  ], [
    REGINA_WARN_MISSING([Library lib$1], [$5])
    REGINA_DO_NOT_COMPILE([$4])
  ])
])

dnl
dnl    REGINA_LIB_REQUIRED(LIBNAME, FUNCTION-IN-LIB, REQUIRED-BY)
dnl
dnl    Checks for the given mandatory library.
dnl    Quits with an error message if the library is missing.
dnl
dnl    Example: REGINA_LIB_REQUIRED(z, zlibVersion, [the calculation engine])
dnl
AC_DEFUN(REGINA_LIB_REQUIRED, [
  AC_CHECK_LIB([$1], [$2], , [
    REGINA_ERR_MISSING([Library lib$1], [$3])
  ])
])

dnl
dnl    REGINA_PROG_JAVAC(TARGET-LIST, REQUIRED-BY)
dnl
dnl    Finds a Java compiler that satisfies the requirements of the
dnl    Regina build process.  The user can override the choice of Java
dnl    compiler by setting $JAVAC in the environment.
dnl
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if no suitable Java compiler
dnl    could be found.
dnl
dnl    Variables JAVAC, JAVACFLAGS and CLASSPATH are defined as precious.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        JAVAC: The selected Java compiler, or an appropriate
dnl               invocation of "missing" if no compiler was found.
dnl        JAVACFLAGS: A set of Java compiler flags (the value of
dnl                    this variable is left untouched).
dnl        CLASSPATH: The Java classpath (this variable is left untouched).
dnl        HAVE_JAVAC: 1 if a suitable compiler was found, 0 otherwise.
dnl
dnl    Example: REGINA_PROG_JAVAC(JAVAUI, [the Java user interface])
dnl
AC_DEFUN(REGINA_PROG_JAVAC, [
  AC_ARG_VAR(JAVAC, [Java compiler])
  AC_ARG_VAR(JAVACFLAGS, [Java compiler flags])
  AC_ARG_VAR(CLASSPATH, [Java compiler classpath (colon-separated)])
  if test -z "$JAVAC"; then
    JAVAC=none
    for javac in "gcj -C" jikes jikes-gij javac; do
      REGINA_PROG_JAVAC_USABLE([$javac], [
        JAVAC="$javac"
        break
      ])
    done
    if test "$JAVAC" = "none"; then
      AC_MSG_WARN([[No suitable Java compiler could be found; $2 will not be built.]])
    fi
  else
    REGINA_PROG_JAVAC_USABLE([$JAVAC], , [
      AC_MSG_WARN([[Java compiler $JAVAC is not suitable; $2 will not be built.]])
      JAVAC=none
    ])
  fi

  if test "$JAVAC" = "none"; then
    REGINA_DO_NOT_COMPILE([$1])
    AC_SUBST(JAVAC, "\$(top_srcdir)/admin/missing javac")
    HAVE_JAVAC=0
  else
    HAVE_JAVAC=1
  fi
  AC_SUBST(HAVE_JAVAC)
  AC_SUBST(JAVAC)
  AC_SUBST(JAVACFLAGS)
])

dnl
dnl    REGINA_PROG_JAVAC_USABLE(JAVA-COMPILER, ACTION-IF-OK, ACTION-IF-NOT-OK)
dnl
dnl    Determines whether the given Java compiler satisfies (some of)
dnl    the requirements of the Regina build process.
dnl
AC_DEFUN(REGINA_PROG_JAVAC_USABLE, [
  javac_ok=yes
  AC_MSG_CHECKING([whether $1 compiles a simple Java class])
  REGINA_TRY_COMPILE_JAVA([$1], , [ String str = "hello"; ], , [
    javac_ok=no
  ])
  AC_MSG_RESULT([$javac_ok])

  if test "$javac_ok" = "yes"; then
    AC_MSG_CHECKING([whether $1 has javax.swing])
    REGINA_TRY_COMPILE_JAVA([$1], [ javax.swing.* ], [ JPanel p = null; ], , [
      javac_ok=no
    ])
    AC_MSG_RESULT([$javac_ok])
  fi

  if test "$javac_ok" = "yes"; then
    ifelse([$2], , :, [$2])
  else
    ifelse([$3], , :, [$3])
  fi
])

dnl
dnl    REGINA_PROG_OPTIONAL(PROG-LIST, VARIABLE, DESCRIPTION, TARGET-LIST,
dnl        REQUIRED-BY)
dnl
dnl    Checks for the given optional program.  The first program from
dnl    <PROG-LIST> that is found will be used.  Alternatively the user
dnl    can override this list by setting <VARIABLE> in the environment.
dnl
dnl    Issues a warning and adds <TARGET-LIST> (which may consist of
dnl    several targets) to $DO_NOT_COMPILE if the program is missing.
dnl
dnl    Variable <VARIABLE> is defined as precious with the help
dnl    text <DESCRIPTION>.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        <VARIABLE>: The program from the given list that was found,
dnl                    or an appropriate invocation of "missing" if
dnl                    no program was found.
dnl
dnl    Example: REGINA_PROG_OPTIONAL(doxygen, DOXYGEN,
dnl                 [Doxygen command for C++ source documentation], DOCSENGINE,
dnl                 [calculation engine documentation])
dnl
AC_DEFUN(REGINA_PROG_OPTIONAL, [
  AC_ARG_VAR([$2], [$3])
  AC_CHECK_PROGS([$2], [$1], none)
  if test "$$2" = "none"; then
    REGINA_DO_NOT_COMPILE([$4])
    for first_prog in $1; do break; done
    AC_SUBST([$2], ["\$(top_srcdir)/admin/missing $first_prog"])
    REGINA_WARN_MISSING([Program $first_prog], [$5])
  fi
])

dnl
dnl    REGINA_SHOULD_BUILD(ITEM, VALUE, DESCRIPTION)
dnl
dnl    Checks whether ITEM is listed in $DO_NOT_COMPILE.
dnl    The given description will be used in the corresponding
dnl    configuration progress message.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        REGINA_BUILD_<ITEM>: <VALUE> if ITEM should be built,
dnl                             empty otherwise.
dnl
dnl    Example: REGINA_SHOULD_BUILD(DOCSHTML, html, [the reference manual])
dnl
AC_DEFUN(REGINA_SHOULD_BUILD, [
  AC_MSG_CHECKING([whether to build $3])
  REGINA_SHOULD_BUILD_INTERNAL([$1])
  AC_MSG_RESULT([$should_build])
  if test "$should_build" = "yes"; then
    REGINA_BUILD_$1="$2"
  else
    REGINA_BUILD_$1=
  fi
  AC_SUBST(REGINA_BUILD_$1)
])

dnl
dnl    REGINA_SHOULD_BUILD(ITEM)
dnl
dnl    Checks whether ITEM is listed in $DO_NOT_COMPILE.
dnl    Variable $should_build will be set to "yes" or "no" as appropriate.
dnl
AC_DEFUN(REGINA_SHOULD_BUILD_INTERNAL, [
  should_build="yes"
  for j in $DO_NOT_COMPILE; do
    if test "$j" = "$1"; then
      should_build="no"
    fi
  done
])

dnl
dnl    REGINA_TRY_COMPILE_JAVA(COMPILER, [IMPORTS], [FUNCTION-BODY],
dnl        [ACTION-IF-OK], [ACTION-IF-NOT-OK])
dnl
dnl    Modified from AC_TRY_COMPILE_JAVA which is
dnl    copyright (c) Devin Weaver and licensed under the GPL.
dnl
dnl    Try to use the given compiler with flags $JAVACFLAGS to compile the
dnl    given Java sources.
dnl
dnl    <IMPORTS> is an optional *single* class or package to import.
dnl    <FUNCTION-BODY> is an optional function body.
dnl
dnl    Example: REGINA_TRY_COMPILE_JAVA(javac, [ javax.swing ],
dnl                 [ JPanel p = null; ], ... )
dnl
AC_DEFUN(REGINA_TRY_COMPILE_JAVA, [
  cat << \EOF > Test.java
/* [#]line __oline__ "configure" */
ifelse([$2], , , [import $2;])
public class Test {
[$3]
}
EOF
  # Put the classpath in Windows format if necessary.
  __tcjava_classpath="$CLASSPATH"
  REGINA_CLASSPATH_CONVERT(CLASSPATH)
  if AC_TRY_COMMAND($1 $JAVACFLAGS Test.java) && test -s Test.class; then
    rm -f Test.java Test.class
    export CLASSPATH="$__tcjava_classpath"
    ifelse([$4], , :, [$4])
  else
    rm -f Test.java Test.class
    export CLASSPATH="$__tcjava_classpath"
    ifelse([$5], , :, [$5])
  fi
])

dnl
dnl    REGINA_TYPE_HASH_SET
dnl
dnl    Determines characteristics of class hash_set<...> from the
dnl    Standard Template Library.
dnl
dnl    AC_SUBST()s the following variables:
dnl
dnl        HASH_SET_HEADER: The header file containing class hash_set<...>.
dnl
dnl    AC_DEFINE()s the following variables:
dnl
dnl        __HASH_NAMESPACE: The namespace containing class hash_set<...>.
dnl        __NO_NAMESPACE_ALIASES: 1 if namespace std cannot be alised,
dnl                                0 otherwise.
dnl
AC_DEFUN(REGINA_TYPE_HASH_SET, [
  # Search for the hash_set header.
  HASH_SET_HEADER=
  AC_CHECK_HEADERS([ext/hash_set hash_set], [
    HASH_SET_HEADER="$ac_header"
    break
  ])
  if test -z "$HASH_SET_HEADER"; then
    AC_MSG_ERROR([[The hash_set headers could not be found.]])
  fi
  AC_SUBST(HASH_SET_HEADER)

  # Determine which namespace the hash_set template is in.
  AC_MSG_CHECKING([[hash_set namespace]])
  HASH_SET_NAMESPACE=none
  for i in std __gnu_cxx; do
    echo "#include <$HASH_SET_HEADER>" > conftest.$ac_ext
    echo "$i::hash_set<int> set;" >> conftest.$ac_ext
    ac_compile='${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext'
    if AC_TRY_EVAL(ac_compile); then
      HASH_SET_NAMESPACE="$i"
      break
    fi
  done
  AC_MSG_RESULT([$HASH_SET_NAMESPACE])
  if test "$HASH_SET_NAMESPACE" = "none"; then
    AC_MSG_ERROR([[The namespace for class hash_set<...> could not be determined.]])
  fi
  AC_DEFINE_UNQUOTED(__HASH_NAMESPACE, [$HASH_SET_NAMESPACE],
    [Namespace for class hash_set<...>.])

  # Determine whether we can alias a namespace to std.
  AC_MSG_CHECKING([[whether namespace std can be aliased]])
  echo "#include <$HASH_SET_HEADER>" > conftest.$ac_ext
  echo "namespace stdalias = $HASH_SET_NAMESPACE;" >> conftest.$ac_ext
  echo "stdalias::hash_set<int> s;" >> conftest.$ac_ext
  ac_compile='${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext'
  if AC_TRY_EVAL(ac_compile); then
    AC_MSG_RESULT([yes])
    NO_NAMESPACE_ALIASES=0
  else
    AC_MSG_RESULT([no])
    NO_NAMESPACE_ALIASES=1
  fi
  AC_DEFINE_UNQUOTED(__NO_NAMESPACE_ALIASES, [$NO_NAMESPACE_ALIASES],
    [Define to 1 if namespace std cannot be aliased.])
])

dnl
dnl    REGINA_VAR_IOS_NOCREATE
dnl
dnl    Determines whether std::ios::nocreate is a valid file opening flag.
dnl
dnl    AC_DEFINE()s the following variables:
dnl
dnl        __USE_IOS_NOCREATE: 1 if this flag is valid, 0 otherwise.
dnl
AC_DEFUN(REGINA_VAR_IOS_NOCREATE, [
  AC_MSG_CHECKING([[for std::ios::nocreate]])
  AC_TRY_COMPILE([
    #include <fstream>
  ], [
    std::ifstream in("foo", std::ios::nocreate);
  ], [
    AC_MSG_RESULT([yes])
    USE_IOS_NOCREATE=1
  ], [
    AC_MSG_RESULT([no])
    USE_IOS_NOCREATE=0
  ])
  AC_DEFINE_UNQUOTED(__USE_IOS_NOCREATE, [$USE_IOS_NOCREATE],
    [Define to 1 if flag std::ios::nocreate is valid.])
])

dnl
dnl    REGINA_WARN_MISSING(MISSING-ITEM, REQUIRED-BY)
dnl
dnl    Issues a warning stating what was missing and which
dnl    build component requires it.
dnl
dnl    Example: REGINA_WARN_MISSING(Library libpopt, [command-line utilities])
dnl
AC_DEFUN(REGINA_WARN_MISSING, [
  AC_MSG_WARN([[$1 is unavailable; $2 will not be built.]])
])

