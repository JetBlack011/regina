<chapter id="packet">
 <title>Working with Packets</title>

 <sect1 id="packet-tree">
  <title>The Packet Tree</title>

  <para>
   Most objects that can be manipulated in &regina; are
   <firstterm>packets</firstterm>.  Packets are pieces of data arranged in
   a tree structure; each packet (aside from the top-level packet) has a
   single parent packet and zero or more child packets.  A &regina; data
   file is nothing more than a packet tree.
  </para>
  <para>
   For each data file, the left hand side of the
   main &regina; window will contain a visual representation of the
   corresponding packet tree as illustrated below.
  </para>
  <screenshot id="shot-packettree">
   <mediaobject>
    <imageobject>
     <imagedata fileref="packettree.png"/>
    </imageobject>
   </mediaobject>
  </screenshot>
 </sect1>

 <sect1 id="packet-types">
  <title>Available Packet Types</title>

  <sect2 id="packet-container">
   <title>Container</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-container.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>container packet</firstterm> does more or less nothing.
    Its only purpose is to have child packets and thus
    assist with the organisation of the packet tree.
   </para>
   <para>
    As an example, a file containing a census might have a top-level
    container packet for the entire census.  This top-level packet might
    have a child container for 1-tetrahedron triangulations, a child container
    for 2-tetrahedron triangulations and so on.  Each of these child containers
    might then have their own child triangulation packets representing
    all the triangulations in their particular section of the census.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="container.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-text">
   <title>Text</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-text.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>text packet</firstterm> contains an arbitrary amount of
    text.  It can be used to insert descriptions, observations and/or
    other miscellaneous comments into various places in the packet tree.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="text.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-pdf">
   <title>&pdf; Document</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-pdf.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Like text packets, a <firstterm>&pdf; packet</firstterm> allows you
    to document your work.  &pdf; packets support richer content,
    including diagrams and formulae; the cost is that they are
    read-only, and must be created outside &regina;.
   </para>
   <para>
    To add a &pdf; packet, create a document in your favourite word
    processor or typesetting system (such as &latex;) and export this
    document to &pdf; format.  Then, within &regina;, import this
    &pdf; document into the packet tree by selecting
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>New PDF Document</guimenuitem>
    </menuchoice>.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pdf.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-triangulation">
   <title>Triangulation</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-triangulation.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>triangulation packet</firstterm> represents a single
    triangulation of a 3-manifold.  A triangulation is described by a
    number of tetrahedra with some faces glued together in pairs.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="triangulation.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-surfacelist">
   <title>Normal Surface List</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-surfaces.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>normal surface list</firstterm> represents a set
    of normal surfaces in a triangulation.  Typically this will be the
    set of all vertex normal surfaces under some particular set of matching
    equations.
   </para>
   <para>
    Normal surfaces can be created using different sets of matching
    equations and can then be viewed in a variety of solution spaces.
    The parent packet of a normal surface list will always be the
    triangulation in which the normal surfaces lie.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="surfacelist.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-filter">
   <title>Surface Filter</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-filter.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>surface filter packet</firstterm> represents a filter
    that can be applied to a large set of normal surfaces to extract
    a subset of surfaces in which the user is interested.
    The various types of filter are as follows.
   </para>

   <sect3 id="packet-filterprop">
    <title>Property Filter</title>

    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="icon-filterprop.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     A <firstterm>property filter</firstterm> extracts all normal
     surfaces with the requested orientability, compactness, boundary
     and/or Euler characteristic(s).
    </para>
    <screenshot>
     <mediaobject>
      <imageobject>
       <imagedata fileref="filterprop.png"/>
      </imageobject>
     </mediaobject>
    </screenshot>
   </sect3>

   <sect3 id="packet-filtercomb">
    <title>Combination Filter</title>

    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="icon-filtercomb.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     A <firstterm>combination filter</firstterm> uses boolean
     <function>AND</function> or <function>OR</function>
     to combine a number of other surface filters.  The filters to be
     combined must be immediate child packets of the combination filter.
    </para>
    <screenshot>
     <mediaobject>
      <imageobject>
       <imagedata fileref="filtercomb.png"/>
      </imageobject>
     </mediaobject>
    </screenshot>
   </sect3>
  </sect2>

  <sect2 id="packet-anglestructures">
   <title>Angle Structure List</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-angles.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    An <firstterm>angle structure list</firstterm> represents a set
    of angle structures on a triangulation.  Typically this will be the
    set of all vertex angle structures under the standard equations.
   </para>
   <para>
    The parent packet of an angle structure list will always be the
    triangulation on which the structures lie.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="angles.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>

  <sect2 id="packet-script">
   <title>Script</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="icon-script.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A <firstterm>script packet</firstterm> contains a &python; script
    with direct access to the calculation engine.  This script can
    have variables representing other
    packets in the packet tree, thus giving you direct access to all of
    the data in the current file.
   </para>
   <para>
    See the <link linkend="python">&python; scripting reference</link>
    for further details.
   </para>
   <screenshot>
    <mediaobject>
     <imageobject>
      <imagedata fileref="script.png"/>
     </imageobject>
    </mediaobject>
   </screenshot>
  </sect2>
 </sect1>

 <sect1 id="packet-menu">
  <title>The <guimenu>Packet Tree</guimenu> Menu</title>

  <para>
   Various operations common to all packet types are
   available from the <guimenu>Packet Tree</guimenu> menu.  Many of these
   operations are also offered as toolbar buttons.
  </para>
  <para>
   Some of these operations are applied to a single packet.
   Each such operation will be applied to the packet currently selected
   in the <link linkend="shot-packettree">visual packet tree</link>
   on the left hand side of the main window
   (not the packet currently being viewed on the right
   hand side of the main window).
  </para>
  <para>
   The following sections describe each operation in turn.
  </para>

  <sect2 id="packet-new">
   <title>Creating New Packets</title>

   <para>
    New packets of any available type can be created through the
    different <guimenuitem>New</guimenuitem> items in the
    <guimenu>Packet Tree</guimenu>
    menu (or through the corresponding toolbar buttons).
    When creating the new packet, you will be asked for the
    following details.
   </para>
   <para>
    <glosslist>
     <glossentry>
      <glossterm>Label:</glossterm>
      <glossdef><para>
       This will be the label of the newly created packet.  No two
       packets in a single data file may have the same label.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Create beneath:</glossterm>
      <glossdef><para>
       This is the (already existing) packet that will become the
       parent of the new packet in the packet tree.  Note that some packets
       require specific types of parent (for instance, a new normal
       surface list must use the corresponding triangulation as its
       parent).
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="packet-clone">
   <title>Cloning</title>

   <para>
    To make an identical copy of an existing packet, the
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Clone Packet</guimenuitem>
    </menuchoice>
    or the
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Clone Subtree</guimenuitem>
    </menuchoice>
    menu items can be used.  The new clone will be inserted into the packet
    tree adjacent to the packet that was cloned.  Note that this means
    that the top-level packet at the root of the entire tree cannot be cloned.
   </para>
   <para>
    If the <guimenuitem>Clone Subtree</guimenuitem> item is used, not only
    will the original packet be copied but the entire subtree
    beneath that packet (&ie;, its children, their children and so on)
    will also be copied.
    If the <guimenuitem>Clone Packet</guimenuitem> item is used, only the
    original packet will be copied; its children will all be ignored.
   </para>
  </sect2>

  <sect2 id="packet-view">
   <title>Viewing and Editing</title>

   <para>
    By selecting the
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>View/Edit</guimenuitem>
    </menuchoice>
    menu item, the currently selected packet will be opened for viewing
    and/or editing.  Depending in part upon the current setting of
    the <link linkend="options-general">Automatic Packet Docking</link>
    option, the packet will either be opened directly within the main
    &regina; window or in a new floating window.
   </para>

   <sect3>
    <title>Using a Packet Editor</title>

    <para>
     Beneath each packet editor is a <guibutton>Commit</guibutton> button.
     Any changes that you make
     to the packet will <emphasis>not</emphasis> be passed to the calculation
     engine until this button is pressed.  In particular, any other
     actions or packets that need to use this packet will not
     see your changes until you have pressed <guibutton>Commit</guibutton>.
    </para>
    <para>
     To ignore any changes you have made to this packet, the
     <guibutton>Refresh</guibutton> button at the bottom of the packet
     editor will reread the current state of the packet from the
     calculation engine.
    </para>
    <para>
     The <guibutton>Close</guibutton> button will close the packet viewer or
     editor entirely.  If changes have been made since
     <guibutton>Commit</guibutton> was last pressed, you will be prompted as
     to whether you wish to apply or ignore these changes.
    </para>
   </sect3>

   <sect3 id="packet-uneditable">
    <title>Uneditable Packets</title>

    <para>
     If the user interface does not allow you to make changes to a
     packet, this means that
     the packet cannot be edited.  Some packets by nature cannot be edited
     (such as containers).  Other packets may be constrained by their
     children &ndash; for instance, if a triangulation is parent to a
     normal surface list, this triangulation must remain constant so
     that the normal surface coordinates are not invalidated.
    </para>
    <para>
     In such a situation, try <link linkend="packet-clone">cloning the
     packet</link> (without its subtree).  The clone should be
     removed of such child-related constraints, and you will be able to
     edit this new clone instead.
    </para>
    <para>
     Packets that cannot be edited because of child constraints
     (such as triangulations that contain normal surface lists)
     will be marked with a small padlock in the packet tree.  This
     can be seen for the figure eight knot complement in the
     illustration below.
    </para>
    <screenshot>
     <mediaobject>
      <imageobject>
       <imagedata fileref="padlock.png"/>
      </imageobject>
     </mediaobject>
    </screenshot>
   </sect3>
  </sect2>

  <sect2 id="packet-rename">
   <title>Renaming</title>

   <para>
    The
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Rename</guimenuitem>
    </menuchoice>
    menu item allows a packet to be given a new label in the packet tree.
    Note that no two packets in the same data file may have the same label.
   </para>
  </sect2>

  <sect2 id="packet-delete">
   <title>Deleting</title>

   <para>
    The
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Delete</guimenuitem>
    </menuchoice>
    menu item will delete the selected packet from the packet tree.
    Note that all children of the selected packet will also be deleted, as
    will their children and so on.
   </para>
   <warning><para>
    Whichever packet is currently being viewed or edited in the right
    hand side of the <link linkend="shot-packettree">main &regina;
    window</link> has absolutely no bearing on which packet will be deleted.
    It is entirely possible to be viewing one packet and yet have a different
    packet selected in the tree; it is the packet selected in the visual
    tree on the <emphasis>left</emphasis>
    hand side of the main window that will be deleted.
   </para></warning>
  </sect2>

  <sect2 id="packet-refresh">
   <title>Refreshing a Subtree</title>

   <para>
    The
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Refresh Subtree</guimenuitem>
    </menuchoice>
    menu item runs through a section of the packet tree looking for packets
    that have been modified, added, moved or renamed.  The visual
    packet tree, as well as any open packet viewers or editors will be
    updated accordingly.
   </para>
   <para>
    These updates should happen automatically, and in general there
    should be no need to invoke the
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Refresh Subtree</guimenuitem>
    </menuchoice>
    menu item.  However, it is still provided in case of emergency.
   </para>
   <para>
    Note that not the entire packet tree will be refreshed.  Only the
    subtree beginning at the selected packet (&ie;, the selected packet,
    its children, their children and so on) will be examined.  Any
    changes outside this subtree will not be noticed.
   </para>
  </sect2>
 </sect1>
</chapter>
