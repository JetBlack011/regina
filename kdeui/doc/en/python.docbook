<?xml version="1.0" ?>
<chapter id="python">
 <title>&python; Scripting</title>

 <sect1 id="python-overview">
  <title>Scripting Overview</title>
  <para>
   &regina; contains inbuilt scripting, which offers you fine control
   over the underlying calculation engine and enables you to automate
   large amounts of processing using the &python;
   programming language.  Scripts can be written and run from within
   &regina;, and a well-written script can relieve you of much work
   that would otherwise have to be painstakingly done by hand
   through the point-and-click interface.
  </para>

  <sect2 id="python-invoking">
   <title>Invoking Scripting</title>
   <para>
    Scripting is available by several means.
    <itemizedlist>
     <listitem><para>
      You can run the command-line program
      <link linkend="man-regina-python"><command>regina-python</command></link>
      without using the graphical user interface at all.  This is fast
      and allows the redirection of input and output.
     </para></listitem>
     <listitem><para>
      You can bring up a &python; console through the
      <guimenu>Tools</guimenu> menu (or the corresponding toolbar button).
     </para></listitem>
     <listitem><para>
      You can create a new <link linkend="packet-script">script
      packet</link>.  Script packets have the advantage that they
      can work seamlessly with many other packets in the
      same file through the use of script variables.
      Furthermore, script packets are saved with the data file for later reuse.
     </para></listitem>
    </itemizedlist>
   </para>
  </sect2>

  <sect2 id="python-python">
   <title>Using &python;</title>
   <para>
    All scripts are run in &python; (<ulink url="http://www.python.org/"/>).
    When using &python;, &regina; objects, classes and methods can be
    accessed directly as if they were &python; objects, classes and methods.
   </para>
   <para>
    &regina; includes a complete reference for the calculation engine,
    which describes in detail the objects, class and methods available
    when writing &python; scripts.  This documentation is generally
    installed in a location similar to
    <filename>/usr/local/share/regina/engine-docs/</filename>, although this
    may differ with your distribution or installation.  The
    documentation installation path can be changed by passing special
    options to <userinput>./configure</userinput> when building &regina;
    from sources.
   </para>
   <para>
    Wherever &regina; gives you access to &python;, you may assume that the
    <parameter>regina</parameter>
    module has been imported (thus giving you access to
    everything contained within it).
    <!-- TODO
    You may also assume that all requested libraries have been loaded (see the
    <link linkend="options-libraries">&python; library options</link> for
    details).
    -->
   </para>
   <para>
    Upon starting a &python; session certain variables might already be
    set for you (such as variables representing the calculation engine or
    the current packet tree).  Read the &python; session startup messages
    for details.
   </para>
   <warning><para>
    Probably the easiest way to crash the program is to bring up
    a &python; console and do something untoward.  &python; scripting
    offers very low-level control over the engine, but also comes with the
    associated dangers.  The general idea is that &python; gives you
    direct access to the &cpp; calculation engine and the user interface has
    no way of knowing what you are tinkering with.  Thus you should tread
    gently. 
   </para></warning>
  </sect2>

  <sect2 id="python-gui">
   <title>Cooperating with the &gui;</title>
   <para>
    If you cannot edit a packet from within the GUI, there is generally
    a reason for this.  For instance, a normal surface list will rely
    upon its parent triangulation remaining fixed and so any
    triangulation with child surface lists will be uneditable.
   </para>
   <para>
    Therefore you should not use &python; as a
    way to get around that barrier; instead you should respect that
    barrier.  Perhaps you can <link linkend="packet-clone">clone the
    packet</link> in question without cloning its subtree (<menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>Clone Packet</guimenuitem>
    </menuchoice>); the clone then should be editable.
   </para>
  </sect2>
 </sect1>

 <sect1 id="sessions">
  <title>Sample &python; Sessions</title>
  <para>
   Reproduced below are a number of sample &python; sessions.
   Each session was started by running
   <userinput>regina-python</userinput>
   from the command line.
  </para>

  <sect2 id="sessiontriangulation">
   <title>Working with a triangulation</title>
   <programlisting>&sessiontriangulation;</programlisting>
  </sect2>

  <sect2 id="sessiontree">
   <title>Working with a packet tree</title>
   <programlisting>&sessiontree;</programlisting>
  </sect2>
 </sect1>
</chapter>
