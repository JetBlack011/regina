<chapter id="triangulations">
 <title>Triangulations</title>

 <para>
  3-manifolds in &regina; are typically represented by
  <firstterm>triangulations</firstterm>.  A triangulation of a 3-manifold
  consists of a set of tetrahedra with instructions on how some or all
  of the faces of these tetrahedra should be glued together in pairs.
 </para>
 <para>
  Triangulations in &regina; are less strict than simplicial complexes:
  you may glue two faces of the same tetrahedron together,
  or you may glue faces so that different edges of the same tetrahedron become
  identified (and likewise for vertices).
  Indeed, the best triangulations for computation are often
  <emphasis>one-vertex triangulations</emphasis>, where all vertices of
  all tetrahedra become identified together.
 </para>
 <para>
  The downside of this flexibility is that, if you are not careful,
  your triangulation might not represent a 3-manifold at all.
  If this happens, &regina; will
  <link linkend="tri-basicprops">tell you about it</link> when you open
  it to view.
 </para>

 <sect1 id="tri-creation">
  <title>Creation</title>

  <sect2 id="tri-new">
   <title>New Triangulations</title>
   <para>
    The simplest way to create a triangulation is through the
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>New Triangulation</guimenuitem>
    </menuchoice>
    menu item (or the corresponding toolbar button),
    which will create a new triangulation from scratch.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="menu-newtri.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    In addition to the usual information, you are asked what
    <emphasis>type</emphasis> of triangulation to create (see the
    drop-down box below).
    Here we walk through the various options.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="newtri.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>

   <sect3 id="tri-new-empty">
    <title>Empty</title>

    <para>
     This will create a new triangulation with no tetrahedra at all.
     This is best if you wish to enter a triangulation by hand:
     first create an empty triangulation, and then
     manually <link linkend="tri-editgluings">add tetrahedra
     and edit the face gluings</link>.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-empty.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
   </sect3>

   <sect3 id="tri-new-lens">
    <title>Layered Lens Space</title>

    <para>
     This will create a layered lens space with the given parameters.
     This involves building two <link linkend="tri-new-layered">layered
     solid tori</link> and gluing them together along their torus boundaries.
     Layered lens spaces were introduced by Jaco and Rubinstein
     <xref linkend="bib-0-efficiency"/>,
     <xref linkend="bib-layeredlensspaces"/> and others.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-lens.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     The parameters
     (<replaceable>p</replaceable>, <replaceable>q</replaceable>)
     must be non-negative and coprime, and must satisfy
     <replaceable>p</replaceable>&gt;<replaceable>q</replaceable>
     (although the exceptional case (0, 1) is also allowed).
     The resulting 3-manifold will be the lens space
     L(<replaceable>p</replaceable>,<replaceable>q</replaceable>).
    </para>
   </sect3>

   <sect3 id="tri-sfs">
    <title>&SFSLong;</title>

    <para>
     This will create an orientable &sfslong; over the 2-sphere with any
     number of exceptional fibres.  &regina; will choose the simplest
     construction that it can based upon the given parameters.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-sfs.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     The parameters for the &sfslong; must be given as a sequence of pairs of
     integers (&a1;,&b1;) (&a2;,&b2;) ... (&an;,&bn;), where each pair
     (&ai;,&bi;) describes a single exceptional fibre.
     An example is (2,-1)&nbsp;(3,4)&nbsp;(5,-4), which represents the
     &poincare; homology sphere.
     The two integers in each pair must be
     relatively prime, and none of &a1;, &a2;, ..., &an; may be zero.
    </para>
    <para>
     Each pair (&ai;,&bi;)
     does not need to be normalised; that is, the parameters may be positive or
     negative, and &bi; may lie outside the range [0,&ai;).
     There is no separate twisting
     parameter; each additional twist can be incorporated into the existing
     parameters by replacing some pair
     (&ai;,&bi;) with (&ai;,&ai;+&bi;).
     Pairs of the form (1,<replaceable>k</replaceable>) and even
     (1,0) are acceptable.
    </para>
   </sect3>

   <sect3 id="tri-new-layered">
    <title>Layered Solid Torus</title>

    <para>
     This will create a layered solid torus with the given parameters.
     This is a solid torus built from a two-triangle &mobius; band by
     repeatedly adding new layers of tetrahedra onto the boundary.
     Layered solid tori were introduced by Jaco and Rubinstein
     <xref linkend="bib-0-efficiency"/>,
     <xref linkend="bib-layeredlensspaces"/> and others.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-lst.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     The three parameters
     (<replaceable>a</replaceable>, <replaceable>b</replaceable>,
     <replaceable>c</replaceable>) must be non-negative and coprime,
     and one must be the sum of the other two.  These parameters
     describe how many times the meridional disc of the solid torus
     intersects the three edges on the boundary of the triangulation.
    </para>
   </sect3>

   <sect3 id="tri-new-loop">
    <title>Layered Loop</title>

    <para>
     This will create a layered loop of the given length.
     This involves layering <replaceable>n</replaceable> tetrahedra
     one upon another
     (where <replaceable>n</replaceable> is the given length),
     and then gluing the final tetrahedron back around to the first.
     If the <guilabel>Twisted</guilabel> box is checked, 
     this final gluing will be done with a
     a 180-degree rotation.
     Full details of the construction can be found in
     <xref linkend="bib-burton-phd"/>.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-loop.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     A twisted layered loop of length
     <replaceable>n</replaceable> forms a one-vertex triangulation of
     the orbit manifold
     &sss;/Q<subscript>4<replaceable>n</replaceable></subscript>.
     An untwisted layered loop of length <replaceable>n</replaceable>
     forms a two-vertex triangulation of the lens space
     L(<replaceable>n</replaceable>,1).
    </para>
   </sect3>

   <sect3 id="tri-new-aug">
    <title>Augmented Triangular Solid Torus</title>

    <para>
     This will create an augmented &trist; with the given parameters.
     An augmented &trist; is created by building
     a three-tetrahedron solid torus and then attaching three
     <link linkend="tri-new-layered">layered solid tori</link> to its
     boundary.  Details of the construction can be found in
     <xref linkend="bib-burton-phd"/>.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-ast.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
    </para>
    <para>
     You must provide six parameters, grouped into three
     pairs of integers (&a1;,&b1;) (&a2;,&b2;) (&a3;,&b3;).  Each pair
     of integers describes one of the layered solid tori that is attached.
     The two integers in each pair must be
     relatively prime, and both positive and negative integers are allowed.
    </para>
    <para>
     If none of &a1;, &a2; or &a3; is zero, the resulting 3-manifold
     will be a &sfslong; over the sphere with at most
     three exceptional fibres.  Conversely, any &sfslong; of this type
     can be represented as an augmented &trist;.
    </para>
   </sect3>

   <sect3 id="tri-new-isosig">
    <title>Isomorphism Signature</title>

    <para>
     This will reconstruct a triangulation from an isomorphism signature.
     An <firstterm>isomorphism signature</firstterm> is a compact sequence
     of letters, digits and/or punctuation that identifies a
     triangulation uniquely up to combinatorial isomorphism (i.e.,
     relabelling tetrahedra and their vertices).  An example is
     <literal>cPcbbbiht</literal> (which describes the figure eight knot
     complement).
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-isosig.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     Stated precisely: every triangulation has a unique isomorphism signature,
     and two triangulations have the same signature if and only if they
     are isomorphic.
     Isomorphism signatures are introduced in the paper
     <xref linkend="bib-burton-simps3"/>.
    </para>
    <para>
     The isomorphism signature for an existing triangulation can be viewed
     through the <link linkend="tri-composition-composition">triangulation
     composition</link> tab.
    </para>
    <caution><para>
     Isomorphism signatures are <emphasis>case sensitive</emphasis>!
     Be sure that you are entering upper-case and lower-case correctly
     (or better, copy and paste the signature using the clipboard if you
     can).
    </para></caution>
   </sect3>

   <sect3 id="tri-new-dehydration">
    <title>Dehydration</title>

    <para>
     This will rehydrate a triangulation from the given dehydration string.
     A <firstterm>dehydration string</firstterm> is a sequence of letters
     that contains enough information to reconstruct a triangulation
     (though tetrahedra and their vertices might be relabelled).
     An example is <literal>dadbcccaqhx</literal>
     (which describes the &snappea; census triangulation
     <literal>m025</literal>).
     Dehydration strings appear in
     census papers such as the hyperbolic cusped census of
     Callahan, Hildebrand and Weeks <xref linkend="bib-cuspedcensus"/>,
     in which the dehydration format is explicitly described.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-dehydration.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     Only some triangulations have dehydration strings.
     The dehydration string (if it exists) for an existing triangulation
     can be viewed
     through the <link linkend="tri-composition-composition">triangulation
     composition</link> tab.
    </para>
   </sect3>

   <sect3 id="tri-new-splitting">
    <title>Splitting Surface</title>

    <para>
     This will reconstruct a triangulation from a splitting surface signature.
     A <firstterm>splitting surface</firstterm> is a compact normal
     surface consisting of precisely one quadrilateral per tetrahedron
     and no other normal discs.
     A <firstterm>splitting surface signature</firstterm> is a string of
     letters arranged into cycles that describe how these quadrilaterals
     are joined together.  From this signature, both the normal surface and
     the enclosing triangulation can be reconstructed.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-splitting.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     When entering a splitting surface signature, you may use
     any block of punctuation to separate cycles of letters.  All
     whitespace will be ignored.  Examples of valid signatures
     are <literal>(ab)(bC)(Ca)</literal> and <literal>AAb-bc-C</literal>.
    </para>
    <para>
     The precise format of splitting surface signatures is described
     in <xref linkend="bib-burton-phd"/>.
    </para>
   </sect3>

   <sect3 id="tri-new-example">
    <title>Example Triangulation</title>

    <para>
     &regina; also offers a small
     selection of ready-made sample triangulations;
     these include the figure eight knot complement,
     the &poincare; homology sphere, the Weber-Seifert dodecahedral
     space, and several others.
     Simply select one from the list provided and the
     corresponding triangulation will be built for you.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="newtri-example.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
   </sect3>
  </sect2>

  <sect2 id="tri-imported">
   <title>Importing Triangulations</title>

   <para>
    You can import triangulations into &regina; from other
    programs, such as &snappeaurl; or &orburl;.  This is done through the
    <menuchoice>
     <guimenu>File</guimenu>
     <guisubmenu>Import</guisubmenu>
    </menuchoice>
    menu.  For details, see the chapter on
    <link linkend="foreign-import">importing and exporting data</link>.
   </para>
  </sect2>

  <sect2 id="tri-census-creation">
   <title>Creating a Census</title>

   <para>
    &regina; can build a census of all 3-manifold triangulations
    satisfying a variety of different constraints.  The best way to
    do this is through the command-line tool
    <link linkend="man-tricensus"><command>tricensus</command></link>.
    For very long calculations,
    <link linkend="man-tricensus-mpi"><command>tricensus-mpi</command></link>
    may be used to distribute the computation across a cluster of machines.
   </para>
  </sect2>
 </sect1>

 <sect1 id="tri-analysis">
  <title>Analysis</title>

  <para>
   &regina; offers a wealth of information about 3-manifold
   triangulations, spread across the many different tabs in the
   triangulation viewer.  Here we walk through the different properties
   and invariants that &regina; can compute.
  </para>

  <sect2 id="tri-basicprops">
   <title>Validity, Orientability and Other Basic Properties</title>

   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="triheader.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    At the top of each triangulation viewer is a banner listing some
    basic properties of the triangulation (circled in red above).
    The following words might appear:
   </para>
   <para>
    <glosslist>
     <glossentry id="tri-propclosed">
      <glossterm><guilabel>Closed</guilabel></glossterm>
      <glossdef><para>
       Signifies that the triangulation has no boundary faces and no
       ideal vertices.  In other words, the link of every vertex is a
       2-sphere.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-propideal">
      <glossterm><guilabel>Ideal bdry</guilabel></glossterm>
      <glossdef>
       <para>
        Signifies that at least one vertex of the triangulation is
        <firstterm>ideal</firstterm>.  That is, the vertex link is
        a closed surface but not a 2-sphere.
       </para>
       <para>
        You can locate any ideal vertices using the
        <link linkend="tri-vertices">skeleton viewers</link>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry id="tri-propbdry">
      <glossterm><guilabel>Real bdry</guilabel></glossterm>
      <glossdef><para>
       Signifies that the triangulation contains one or more boundary faces.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-proporient">
      <glossterm><guilabel>Orientable</guilabel> /
       <guilabel>non-orientable</guilabel> /
       <guilabel>oriented</guilabel></glossterm>
      <glossdef>
       <para>
        The words <guilabel>orientable</guilabel>
        or <guilabel>non-orientable</guilabel> indicate
        whether or not the triangulation represents an orientable
        3-manifold.
       </para>
       <para>
        If the words <guilabel>orientable and oriented</guilabel> appear,
        this indicates that the vertex labels 0, 1, 2 and 3 on each
        tetrahedron induce a consistent orientation for all tetrahedra
        in the entire triangulation.
       </para>
       <para>
        If you need a consistent orientation for all tetrahedra but you
        only see <guilabel>orientable</guilabel> (not
        <guilabel>orientable and oriented</guilabel>), you can fix this by
        <link linkend="tri-orient">orienting your triangulation</link>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry id="tri-propconn">
      <glossterm><guilabel>Connected</guilabel> /
       <guilabel>disconnected</guilabel></glossterm>
      <glossdef><para>
       The words <guilabel>connected</guilabel>
       or <guilabel>disconnected</guilabel> indicate
       whether or not the triangulation forms a single connected piece.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-propvalid">
      <glossterm><guilabel>Invalid triangulation</guilabel></glossterm>
      <glossdef>
       <para>
        Signifies that the triangulation is &ldquo;broken&rdquo; to the
        point where &regina; cannot do any serious work with it.
        This can happen for one of two reasons:
        (i)&nbsp;some vertex link is a surface with boundary
        but not a disc; or
        (ii)&nbsp;some edge is identified with itself in reverse.
       </para>
       <para>
        You can locate the offending vertex or edge using the
        <link linkend="tri-skeleton-skelcomp">skeleton viewers</link>.
        If the triangulation is invalid, no other information will appear
        in the banner.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Empty</guilabel></glossterm>
      <glossdef><para>
       Signifies that the triangulation contains no tetrahedra at all.
       In this case, no other information will appear in the banner.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="tri-viewgluings">
   <title>Viewing Tetrahedron Face Gluings</title>

   <para>
    The <guilabel>Gluings</guilabel> tab shows how the various
    tetrahedron faces are glued to each other in pairs.
    The face gluings are presented in a table:
    each row represents a tetrahedron, and the four columns on the right
    represent the four faces of each tetrahedron.
    Tetrahedra are numbered 0,1,2,..., and
    the four vertices of each tetrahedron are numbered 0,1,2,3.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="tri-viewgluings.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Each cell of this table represents a single face of a single
    tetrahedron.  For instance, the cell circled in red
    above represents face&nbsp;013 of tetrahedron&nbsp;7 (that is, the face
    formed from vertices 0,1,3 of tetrahedron&nbsp;7).
   </para>
   <para>
    The contents of the cell show how the face is glued.  In the example
    above, the circled cell contains <literal>3&nbsp;(203)</literal>,
    indicating that face&nbsp;013 of tetrahedron&nbsp;7 is glued to
    face&nbsp;203 of tetrahedron&nbsp;3 using the affine map that
    matches vertices 0,1,3 of tetrahedron&nbsp;7 with vertices
    2,0,3 of tetrahedron&nbsp;3 respectively.
    The same gluing can be seen from the opposite direction in the row
    for tetrahedron&nbsp;3.
   </para>
   <para>
    An empty cell indicates that a face is not glued to anything at all;
    that is, the face forms part of the <emphasis>boundary</emphasis> of
    the 3-manifold.  In the table above there are two boundary faces:
    face&nbsp;123 of tetrahedron&nbsp;1, and face&nbsp;123 of
    tetrahedron&nbsp;4.  In our example these join together to form the torus
    boundary of the figure eight knot complement.
   </para>
   <para>
    You can modify the triangulation by typing new face gluings directly
    into this table.  See the section on
    <link linkend="tri-editgluings">modifying triangulations</link> for
    details.
   </para>
  </sect2>

  <sect2 id="tri-skeleton">
   <title>Skeletal Information</title>

   <para>
    The <guilabel>Skeleton</guilabel> tab holds
    two smaller tabs offering combinatorial information about
    the skeleton and dual skeleton of the triangulation.
   </para>

   <sect3 id="tri-skeleton-skelcomp">
    <title>Skeletal Components</title>
    <para>
     In the
     <guilabel>Skeleton</guilabel>&rarr;<guilabel>Skeletal Components</guilabel>
     tab you will see the total number of vertices, edges, faces, tetrahedra,
     components and boundary components in the triangulation.
     Beside each number is a <guibutton>View</guibutton> button that
     lets you view explicit structural details about each object in the class.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-skeleton.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <sect4 id="tri-vertices">
     <title>Viewing Vertices</title>
     <para>
      If you click on the <guibutton>View</guibutton> button beside the vertex
      count, you will see a table listing the individual vertices of the
      triangulation.
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="tri-vertices.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
     <para>
      The columns in this table are:
      <glosslist>
       <glossentry>
        <glossterm><guilabel>Vertex #</guilabel></glossterm>
        <glossdef><para>
         Identifies each vertex with an
         individual <firstterm>vertex number</firstterm>, starting from 0
         and counting upwards.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Type</guilabel></glossterm>
        <glossdef><para>
         Gives some information about the <firstterm>link</firstterm> of the
         vertex (the boundary of a small regular neighbourhood).
         Text you might see here includes:
         <glosslist>
          <glossentry>
           <glossterm><guilabel>Bdry</guilabel></glossterm>
           <glossdef><para>
            Appears when the vertex is a standard boundary vertex,
            i.e., the vertex link is a disc.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Cusp (torus)</guilabel></glossterm>
           <glossdef><para>
            Appears when the vertex is a torus cusp,
            i.e., the vertex link is a torus.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Cusp (klein bottle)</guilabel></glossterm>
           <glossdef><para>
            Appears when the vertex is a Klein bottle cusp,
            i.e., the vertex link is a Klein bottle.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Cusp
            (<replaceable>surface</replaceable>)</guilabel></glossterm>
           <glossdef><para>
            Appears when the vertex is a non-standard cusp,
            i.e., the vertex link is a closed surface but not a sphere,
            torus or Klein bottle.  Here
            <replaceable>surface</replaceable>
            will describe the orientability and genus of the vertex link.
            An example might be <literal>Cusp (orbl, genus 3)</literal>.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Non-std bdry</guilabel></glossterm>
           <glossdef><para>
            Appears when the vertex is a non-standard boundary vertex.
            This means the vertex link is a surface with boundary but not
            a disc.  If a vertex like this appears, the entire
            triangulation
            will be <link linkend="tri-propvalid">marked as invalid</link>.
           </para></glossdef>
          </glossentry>
         </glosslist>
         If the vertex link is a sphere (i.e., the vertex is an ordinary
         internal vertex of the triangulation), then the second column will
         be left empty.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Degree</guilabel></glossterm>
        <glossdef><para>
         Lists the <firstterm>degree</firstterm> of each vertex.
         This is the number of individual tetrahedron vertices that are
         identified together to make this vertex of the triangulation.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Tetrahedra (Tet vertices)</guilabel></glossterm>
        <glossdef><para>
         Lists precisely which vertices
         of which tetrahedra come together to
         form each overall vertex of the triangulation.  An example is
         <literal>3&nbsp;(0), 7&nbsp;(1), 3&nbsp;(2), 5&nbsp;(0)</literal>,
         indicating a degree&nbsp;4 vertex obtained by identifying
         vertices&nbsp;0 and 2 of tetrahedron&nbsp;3,
         vertex&nbsp;1 of tetrahedron&nbsp;7, and
         vertex&nbsp;0 of tetrahedron&nbsp;5.
        </para></glossdef>
       </glossentry>
      </glosslist>
     </para>
    </sect4>
    <sect4 id="tri-edges">
     <title>Viewing Edges</title>
     <para>
      If you click on the <guibutton>View</guibutton> button beside the
      edge count, you will see a table listing the individual
      edges of the triangulation.
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="tri-edges.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
     <para>
      The columns in this table are:
      <glosslist>
       <glossentry>
        <glossterm><guilabel>Edge #</guilabel></glossterm>
        <glossdef><para>
         Identifies each edge with an
         individual <firstterm>edge number</firstterm>, starting from 0
         and counting upwards.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Type</guilabel></glossterm>
        <glossdef><para>
         Gives some additional information about the edge.
         Text you might see here includes:
         <glosslist>
          <glossentry>
           <glossterm><guilabel>Bdry</guilabel></glossterm>
           <glossdef><para>
            Indicates a boundary edge (i.e., an edge that lies on some
            boundary face of the triangulation).
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>INVALID</guilabel></glossterm>
           <glossdef><para>
            Indicates an edge glued to itself in reverse (so the midpoint of
            this edge is a projective plane cusp).
            If an edge like this appears, the entire triangulation will
            also be <link linkend="tri-propvalid">marked as invalid</link>.
           </para></glossdef>
          </glossentry>
         </glosslist>
         If the edge is valid and an ordinary internal edge (i.e.,
         the relative interior of the edge lies within the interior
         of the triangulation), then the second column will be left empty.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Degree</guilabel></glossterm>
        <glossdef><para>
         Lists the <firstterm>degree</firstterm> of each edge.
         This is the number of individual tetrahedron edges that are
         identified together to make this edge of the triangulation.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Tetrahedra (Tet vertices)</guilabel></glossterm>
        <glossdef>
         <para>
          Lists precisely which edges
          of which tetrahedra come together to
          form each overall edge of the triangulation.  An example is
          <literal>0&nbsp;(31), 1&nbsp;(01), 0&nbsp;(02)</literal>,
          indicating a degree&nbsp;3 edge obtained by identifying
          edges&nbsp;31 and 02 of tetrahedron&nbsp;0, and
          edge&nbsp;01 of tetrahedron&nbsp;1
          (here edge
          31 means the edge running from vertex&nbsp;3 to vertex&nbsp;1,
          and so on).
         </para>
         <para>
          The order of vertices is important: this example also shows that
          vertex&nbsp;3 of tetrahedron&nbsp;0,
          vertex&nbsp;0 of tetrahedron&nbsp;1, and
          vertex&nbsp;0 of tetrahedron&nbsp;0 all represent
          the <emphasis>same end</emphasis> of the edge.
         </para>
         <para>
          The order of tetrahedra in this list is also important: tetrahera
          are written in the order in which one sees them when walking
          around the edge link.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </para>
    </sect4>
    <sect4 id="tri-faces">
     <title>Viewing Faces</title>
     <para>
      If you click on the <guibutton>View</guibutton> button beside the
      face count, you will see a table listing the individual
      faces of the triangulation.
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="tri-faces.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
     <para>
      The columns in this table are:
      <glosslist>
       <glossentry>
        <glossterm><guilabel>Face #</guilabel></glossterm>
        <glossdef><para>
         Identifies each face with an
         individual <firstterm>face number</firstterm>, starting from 0
         and counting upwards.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Type</guilabel></glossterm>
        <glossdef><para>
         Gives some information about the <firstterm>shape</firstterm>
         of the face in the triangulation, according to how its
         edges and vertices are identified together.
         Text you might see here includes:
         <glosslist>
          <glossentry>
           <glossterm><guilabel>Triangle</guilabel></glossterm>
           <glossdef><para>
            No vertices or edges of the face are identified.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Scarf</guilabel></glossterm>
           <glossdef><para>
            Two vertices of the face are identified; all edges are distinct.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Parachute</guilabel></glossterm>
           <glossdef><para>
            All three vertices of the face are identified; all edges are
            distinct.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>&mobius; band</guilabel></glossterm>
           <glossdef><para>
            Two edges of the face are identified to form a &mobius; band
            (causing all three vertices to be identified); the third edge
            remains distinct.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Cone</guilabel></glossterm>
           <glossdef><para>
            Two edges of the face are identified to form a cone (causing
            two vertices to be identified); the third edge and third vertex
            remain distinct.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Horn</guilabel></glossterm>
           <glossdef><para>
            Two edges of the face are identified to form a cone and all
            the third vertex is identified with the others; the third edge
            remains distinct.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Dunce hat</guilabel></glossterm>
           <glossdef><para>
            All three edges of the face are identified, some with
            orientable and some with non-orientable gluings.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>L(3,1)</guilabel></glossterm>
           <glossdef><para>
            All three edges of the face are identified using non-orientable
            gluings; note that this forms a spine for the lens space L(3,1).
           </para></glossdef>
          </glossentry>
         </glosslist>
         In addition to the shape, you will also see the text
         <guilabel>(Bdry)</guilabel> for each boundary face
         (i.e., each face that lies entirely within the boundary of the
         triangulation).
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Degree</guilabel></glossterm>
        <glossdef><para>
         Lists the <firstterm>degree</firstterm> of each face,
         i.e., the number of individual tetrahedron faces that are
         identified together to make this face of the triangulation.
         This is always 1 for a boundary face, or 2 for an internal
         face.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Tetrahedra (Tet vertices)</guilabel></glossterm>
        <glossdef>
         <para>
          Lists precisely which faces
          of which tetrahedra come together to
          form each overall face of the triangulation.  An example is
          <literal>2&nbsp;(123), 3&nbsp;(120)</literal>,
          indicating an internal face obtained by gluing
          faces&nbsp;123 of tetrahedron&nbsp;2 with
          faces&nbsp;120 of tetrahedron&nbsp;3.
         </para>
         <para>
          Again, the order of vertices is important: this example also shows
          that vertex&nbsp;3 of tetrahedron&nbsp;2 represents the
          <emphasis>same corner</emphasis> of the face as
          vertex&nbsp;0 of tetrahedron&nbsp;3.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </para>
    </sect4>
    <sect4 id="tri-components">
     <title>Viewing Components</title>
     <para>
      If you click on the <guibutton>View</guibutton> button beside the
      component count, you will see a table listing the individual
      connected components of the triangulation.
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="tri-comp.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
     <para>
      The columns in this table are:
      <glosslist>
       <glossentry>
        <glossterm><guilabel>Cmpt #</guilabel></glossterm>
        <glossdef><para>
         Identifies each connected component with an
         individual <firstterm>component number</firstterm>, starting from 0
         and counting upwards.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Type</guilabel></glossterm>
        <glossdef><para>
         Gives some additional information about the individual
         component, similar to the <link linkend="tri-basicprops">basic
         properties</link> that you can view for each triangulation.
         Text you might see here includes:
         <glosslist>
          <glossentry>
           <glossterm><guilabel>Real</guilabel> /
            <guilabel>Ideal</guilabel></glossterm>
           <glossdef><para>
            The text <guilabel>Real</guilabel> indicates that the
            the component contains no ideal vertices, and the text
            <guilabel>Ideal</guilabel> indicates that the component
            contains at least one ideal vertex.
            An <firstterm>ideal vertex</firstterm> is a vertex whose
            link is a closed surface but not a 2-sphere.
           </para></glossdef>
          </glossentry>
          <glossentry>
           <glossterm><guilabel>Orbl</guilabel> /
            <guilabel>Non-orbl</guilabel></glossterm>
           <glossdef><para>
            Indicates whether the component is orientable or
            non-orientable.
           </para></glossdef>
          </glossentry>
         </glosslist>
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Size</guilabel></glossterm>
        <glossdef><para>
         Gives the number of tetrahedra belonging to each connected
         component.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Tetrahedra</guilabel></glossterm>
        <glossdef>
         <para>
          Lists the individual tetrahedra belonging to each connected
          component.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </para>
    </sect4>
    <sect4 id="tri-bdrycomponents">
     <title>Viewing Boundary Components</title>
     <para>
      If you click on the <guibutton>View</guibutton> button beside the
      component count, you will see a table listing the individual
      boundary components of the triangulation.
      This includes <firstterm>real</firstterm> boundary components
      (consisting of several boundary faces), and also
      <firstterm>ideal</firstterm> boundary components (each of which
      consists of a single ideal vertex).
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="tri-bc.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
     <para>
      The columns in this table are:
      <glosslist>
       <glossentry>
        <glossterm><guilabel>Cmpt #</guilabel></glossterm>
        <glossdef><para>
         Identifies each boundary component with an
         individual <firstterm>boundary component number</firstterm>,
         starting from 0 and counting upwards.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Type</guilabel></glossterm>
        <glossdef><para>
         Either <guilabel>Real</guilabel> or <guilabel>Ideal</guilabel>,
         according to whether this is a real or ideal boundary component
         (as described above).
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Size</guilabel></glossterm>
        <glossdef><para>
         For a real boundary component, this gives the number of
         boundary faces that make up the component.
         For an ideal boundary component, this will always state
         <literal>1&nbsp;vertex</literal>.
        </para></glossdef>
       </glossentry>
       <glossentry>
        <glossterm><guilabel>Faces / Vertex</guilabel></glossterm>
        <glossdef>
         <para>
          For a real boundary component, this lists the individual
          boundary faces that make up the component.  For an ideal
          boundary component, this lists the specific vertex involved.
         </para>
         <para>
          Faces are identified using the individual face
          numbers that you see in the first column of the
          <link linkend="tri-faces">face viewer</link>, and likewise
          for <link linkend="tri-vertices">vertices</link>.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </para>
    </sect4>
   </sect3>

   <sect3 id="tri-skeleton-facegraph">
    <title>Face Pairing Graph</title>
    <para>
     The
     <guilabel>Skeleton</guilabel>&rarr;<guilabel>Face Pairing Graph</guilabel>
     tab offers a visual representation of how the individual tetrahedra are
     glued together.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-fpg.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     The <firstterm>face pairing graph</firstterm> is essentially the
     dual 1-skeleton of the triangulation: every
     node of the graph represents a tetrahedron, and every arc
     represents a pair of tetrahedron faces that are joined together.
     For a closed triangulation the face pairing graph is always
     4-valent; for a bounded triangulation there may be nodes
     of degree three or less.
    </para>
    <para>
     &regina; uses the external application &graphvizurl; to
     draw the graph.  If &graphviz; is not installed on
     your system then the face pairing graph cannot be displayed.
     &graphviz; is a widely-used application, and most
     &linux; distributions offer &graphviz; packages.
    </para>
    <para>
     If &graphviz; is installed but for some reason &regina; cannot find it,
     you can tell &regina; where to find &graphviz; in the
     <link linkend="options-triangulation">triangulation options</link>.
    </para>
   </sect3>
  </sect2>

  <sect2 id="tri-algebra">
   <title>Algebraic Invariants</title>

   <para>
    The <guilabel>Algebra</guilabel> tab in the triangulation viewer
    contains a variety of smaller tabs describing different
    algebraic invariants of the triangulation.
   </para>
   <para>
    Note that if the triangulation contains ideal vertices, the
    algebraic properties will be calculated as if these vertices had
    been truncated.  These truncated ideal vertices will also be
    considered part of the boundary.
   </para>
   <warning><para>
    There is no guarantee that invalid edges (edges
    glued to themselves in reverse) will be dealt with correctly.
    In particular, the projective plane cusps they produce may be
    ignored.
   </para></warning>

   <sect3 id="tri-algebra-homology">
    <title>Homology Groups</title>
    <para>
     The <guilabel>Homology</guilabel> tab of the algebra viewer
     presents various homology groups of the triangulation.  These include
     H1(M) (the first homology group),
     H1(M, &#x2202;M)
     (the relative first homology group with respect to the boundary),
     H1(&#x2202;M) (the first homology group of the boundary),
     H2(M) (the second homology group) and
     H2(M ; Z<subscript>2</subscript>)
     (the second homology group with coefficients in
     Z<subscript>2</subscript>).
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-homology.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
   </sect3>

   <sect3 id="tri-algebra-fundgroup">
    <title>Fundamental Group</title>
    <para>
     The <guilabel>Fund. Group</guilabel> tab of the algebra viewer
     contains the fundamental group of the triangulation,
     presented as a set of generators and
     relations.  The generators and relations will be passed through a
     fairly weak recognition routine, and if the group is recognised then
     its common name will be given as well.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-fundgroup.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     If you have &gaplongurl; installed on your system, you can use &gap;
     to simplify the fundamental group presentation.  &regina; does
     perform some automatic simplifications of its own, but &gap;'s
     simplification routines are far more powerful.
    </para>
    <para>
     To simplify the group presentation using &gap;,
     press the <guibutton>Simplify using GAP</guibutton> button
     beneath the fundamental group.  While &regina; is talking to &gap;, the
     state of the conversation will be displayed in a separate dialog box.
    </para>
    <para>
     If you wish to see a full transcript of the conversation between
     &regina; and &gap;, start &regina; from the command-line by running
     <command>regina-kde</command>.  A full transcript of the
     conversation will be written to the text console beneath the
     <command>regina-kde</command> command.
    </para>
    <para>
     If &regina; is having trouble starting &gap;, you can tell it where
     to find &gap; in the
     <link linkend="options-triangulation">triangulation options</link>.
    </para>
    <tip><para>
     You can try to simplify using &gap; more than once.  Sometimes
     &gap; gets a better presentation for the group when run a second or
     third time.
    </para></tip>
   </sect3>
   <sect3 id="tri-algebra-turaevviro">
    <title>Turaev-Viro Invariants</title>
    <para>
     The <guilabel>Turaev-Viro</guilabel> tab of the algebra viewer
     allows the calculation of arbitrary Turaev-Viro state sum invariants.
    </para>
    <para>
     Each Turaev-Viro invariant corresponds to a particular set of initial
     data, as described in the paper of Turaev and Viro in which these
     invariants appear <xref linkend="bib-turaevviro"/>.  In particular,
     Section 7 of this paper describes the initial data as determined
     by an integer <replaceable>r</replaceable>&nbsp;&gt;=&nbsp;3 and a
     root of unity <replaceable>q</replaceable><subscript>0</subscript>
     of degree 2<replaceable>r</replaceable>.
    </para>
    <para>
     To calculate a Turaev-Viro invariant, a pair of integers
     <replaceable>r</replaceable>, <replaceable>root</replaceable>
     should be entered into the text box provided.  The integer
     <replaceable>r</replaceable> is used directly in the initial data
     as described above.  The integer <replaceable>root</replaceable>
     should be strictly between 0 and 2<replaceable>r</replaceable>;
     this identifies which particular root of unity
     <replaceable>q</replaceable><subscript>0</subscript> to use.
    </para>
    <para>
     Note that only small values of <replaceable>r</replaceable>
     should be used, since the time required to calculate the
     invariant grows exponentially with <replaceable>r</replaceable>.
    </para>
    <para>
     Once calculated, the invariant will be displayed in the list box
     provided.  Turaev-Viro invariants are saved to file with the
     triangulation, so they do not need to be recalculated when the file
     is closed and reopened.
    </para>
   </sect3>
   <sect3 id="tri-algebra-cellular">
    <title>Cellular Information</title>
    <para>
     The <guilabel>Cellular Info</guilabel> tab of the algebra viewer
     displays information on the standard and dual CW-decompositions,
     a variety of homology groups and mappings, the
     Kawauchi-Kojima invariants of the torsion linking form, and
     comments on where the triangulation might be embeddable.
     Many thanks are due to Ryan Budney for implementing these features.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-cellular.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     Like the other algebraic results, all information on the
     <guilabel>Cellular Information</guilabel> tab
     refers to the compact manifold that the triangulation represents.
     In particular, ideal vertices are truncated and considered as
     real boundary surfaces.
    </para>
    <para>
     Specific results on this tab include:
     <glosslist>
      <glossentry>
       <glossterm>Cells</glossterm>
       <glossdef>
        <para>
         Lists the number of cells of each dimension for a standard
         CW-decomposition of the manifold.  This is a list of four
         numbers, counting the 0-cells, 1-cells, 2-cells and 3-cells
         respectively.
        </para>
        <para>
         For a closed triangulation (no ideal vertices), this is simply
         the number of vertices, edges, faces and tetrahedra.  For an
         ideal triangulation this takes into account the truncation of
         ideal vertices, and is therefore a little more complex.
        </para>
       </glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Dual cells</glossterm>
       <glossdef><para>
         Lists the number of cells of each dimension in the
         dual CW-decomposition.  As before, this is a list of four
         numbers that count the 0-cells, 1-cells, 2-cells and 3-cells
         in order.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Euler characteristic</glossterm>
       <glossdef><para>
        Gives the Euler characteristic of the manifold, as computed from
        the CW-decompositions.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Homology groups</glossterm>
       <glossdef><para>
        Lists the homology groups of the manifold with coefficients in
        the integers.  The four groups
        H<subscript>0</subscript>, H<subscript>1</subscript>,
        H<subscript>2</subscript> and H<subscript>3</subscript> are listed
        in order.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Boundary homology groups</glossterm>
       <glossdef><para>
        Lists the homology groups of the boundary of the manifold, again
        with coefficients in the integers.  The three groups
        H<subscript>0</subscript>, H<subscript>1</subscript> and
        H<subscript>2</subscript> are listed in order.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>H1(&#x2202;M &mdash;&gt; M)</glossterm>
       <glossdef><para>
        Since the boundary is a submanifold of the original manifold,
        there is an induced map on the first homology group.  This
        item on the <guilabel>Cellular Information</guilabel> tab
        describes some properties of this induced map.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Torsion form rank vector</glossterm>
       <glossdef>
        <para>
         Given an oriented 3-manifold &varM;,
         there is a symmetric bilinear function
         t&hom1;(&varM;)&nbsp;x&nbsp;t&hom1;(&varM;)&nbsp;&mdash;>&nbsp;Q/Z
         where t&hom1;(&varM;) is the torsion subgroup of &hom1;(&varM;).  
         It is computed in this way: let &varx; and &vary; be 1-dimensional
         torsion homology classes.  Then &varn;&varx; is the boundary of
         some 2-cycle &varz; (transverse to &vary;) for some integer &varn;.
         The <firstterm>torsion linking form</firstterm> of
         &varx; and &vary; is the 
         oriented intersection number of &varz; and &vary;, divided by &varn;.
        </para>
        <para>
         Kawauchi and Kojima
         gave a complete classification of such torsion linking forms
         <xref linkend="bib-kktorsionlinkingform"/>.  &regina; computes the 
         torsion linking form, and implements the Kawauchi-Kojima
         classification.
         This is the first of the three Kawauchi-Kojima invariants of the
         torsion linking form on the torsion subgroup of &hom1;.
        </para>
        <para>
         This is the <firstterm>torsion form rank vector</firstterm>,
         which 
         lists the prime power decomposition of the torsion subgroup of
         &hom1;(&varM;).  
         For example, if &hom1;(&varM;) is a direct sum of &varn; copies of
         Z<subscript>20</subscript> and &varm; copies of
         Z<subscript>18</subscript>, then the torsion form rank vector
         would be: 2(&varm;&nbsp;&varn;)&nbsp;3(0&nbsp;&varm;)&nbsp;5(&varn;)
         since
         the group is isomorphic to
         &varm;Z<subscript>2^1</subscript> +
         &varn;Z<subscript>2^2</subscript> +
         0Z<subscript>3</subscript> +
         &varm;Z<subscript>3^2</subscript> +
         &varn;Z<subscript>5</subscript>.
        </para>
        <para>
         Note that the Kawauchi-Kojima invariants are only computed for
         connected orientable manifolds.
        </para>
       </glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Sigma vector</glossterm>
       <glossdef>
        <para>
         This is the second of the three Kawauchi-Kojima invariants
         described above <xref linkend="bib-kktorsionlinkingform"/>.
         This is the <firstterm>2-torsion sigma vector</firstterm>,
         and is relevant for manifolds in which H<subscript>1</subscript>
         has 2-torsion.  It is an orientation-sensitive invariant, where
         the orientation is chosen so that the first tetrahedron in the
         triangulation is positively-oriented with its standard parametrization.
        </para>
        <para>
         As noted above, the Kawauchi-Kojima invariants are only computed
         for connected orientable manifolds.
        </para>
       </glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Legendre symbol vector</glossterm>
       <glossdef>
        <para>
         This is the third of the three Kawauchi-Kojima invariants of the
         torsion linking form <xref linkend="bib-kktorsionlinkingform"/>.
         This is the <firstterm>odd p-torsion Legendre symbol
         vector</firstterm>, originally constructed by Seifert,
         and is relevant for manifolds in which H<subscript>1</subscript>
         has odd torsion.
        </para>
        <para>
         Again, the Kawauchi-Kojima invariants are only computed for
         connected orientable manifolds.
        </para>
       </glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Comments</glossterm>
       <glossdef>
        <para>
         This final entry in the
         <guilabel>Cellular Information</guilabel> tab comments upon
         where the manifold might embed.  In particular, it attempts to
         make deductions about whether the manifold might embed in
         R<superscript>3</superscript>, S<superscript>3</superscript>,
         S<superscript>4</superscript> or a homology sphere. If the manifold
         is orientable it tests for the hyperbolicity of the torsion linking
         form.  It also performs the Kawauchi-Kojima 2-torsion test, useful
         for determining if a manifold with boundary does not embed in any 
         homology 4-sphere.
        </para>
        <para>
         The information in this field might change over time
         (specifically, it might become more detailed in future releases
         of &regina; as more tests become available).
         Currently it examines the homology, the Kawauchi-Kojima
         invariants and some other elementary properties, and uses
         C.&nbsp;T.&nbsp;C.&nbsp;Wall's theorem that 3-manifolds embed
         in S<superscript>5</superscript>.
        </para>
        <para>
         These comments are provided for both orientable and
         non-orientable manifolds.  In the non-orientable case they may
         provide additional information regarding the embeddability of the
         <link linkend="tri-cover">orientable double cover</link>.  
        </para>
       </glossdef>
      </glossentry>
     </glosslist>
    </para>
    <para>
     The paper <xref linkend="bib-budney-emb11"/> shows how some
     of this information can be used in studying embedding problems.
    </para>
   </sect3>
  </sect2>

  <sect2 id="tri-composition">
   <title>Combinatorial Composition</title>
   <para>
    The <guilabel>Composition</guilabel> tab in the triangulation viewer
    presents information regarding the combinatorial structure of the
    triangulation.
   </para>

   <sect3 id="tri-composition-isomorphism">
    <title>Isomorphism / Subcomplex Tests</title>
    <para>
     At the top of the composition tab is an area for performing
     isomorphism and subcomplex tests.  A drop-down box is provided in
     which a second triangulation <replaceable>T</replaceable> can be
     selected.  Each time a new triangulation <replaceable>T</replaceable>
     is chosen, an isomorphism / subcomplex test is performed.
    </para>
    <para>
     Specifically, the program tests for any of the following
     relationships:
     <itemizedlist>
      <listitem><para>
       this triangulation and <replaceable>T</replaceable> are isomorphic;
      </para></listitem>
      <listitem><para>
       this triangulation is isomorphic to a subcomplex of
       <replaceable>T</replaceable>;
      </para></listitem>
      <listitem><para>
       <replaceable>T</replaceable> is isomorphic to a subcomplex of
       this triangulation.
      </para></listitem>
     </itemizedlist>
     The relationship (if any) is reported alongside the drop-down
     box.  Furthermore, if a relationship does exist then the adjacent
     <guibutton>Details</guibutton> button can be pressed to obtain a
     precise mapping of tetrahedra and tetrahedron vertices
     corresponding to this isomorphism.
    </para>
   </sect3>

   <sect3 id="tri-composition-composition">
    <title>Triangulation Composition and Dehydration</title>
    <para>
     Forming the lower portion of the composition tab is a large region
     in which further details of the triangulation composition and the
     underlying 3-manifold are displayed.  Presented here is all the
     information that &regina; can deduce simply by searching for
     well-structured features within the triangulation that it can
     recognise.  Some triangulations can be completely identified;
     others (frequently poorly-structured non-minimal triangulations)
     yield little or no useful information at all.
    </para>
    <para>
     If the triangulation and/or its underlying 3-manifold can be
     identified, these are reported.  In addition, the program
     searches for a variety of standard subcomplexes within the
     triangulation.  If any of these subcomplexes are found, these too
     are reported along with precise details of where they occur.
     Many of these subcomplexes are described in detail in Burton's PhD thesis
     <xref linkend="bib-burton-phd"/>
     and the papers <xref linkend="bib-burton-nor7"/> and
     <xref linkend="bib-burton-satblocks"/>;
     these descriptions can be quite laborious and will not be repeated here.
    </para>
    <para>
     If it exists, the dehydration string for the triangulation is also
     reported here.  Dehydration strings, described by
     Callahan, Hildebrand and Weeks <xref linkend="bib-cuspedcensus"/>,
     allow complex triangulations to be represented by a simple strings
     of letters.  &regina; can convert a dehydration string back into a
     real triangulation, either by
     <link linkend="tri-new-dehydration">creating a new triangulation</link>
     or by <link linkend="import-dehydrationlist">importing a list of
     dehydration strings</link>.
    </para>
    <para>
     Note that dehydration strings only exist for connected
     triangulations with no boundary faces and at most 25 tetrahedra.
     Furthermore, they implicitly describe a canonical ordering of the
     triangulation tetrahedra and vertices&mdash;dehydrating and then
     recreating a triangulation may not give you the same triangulation
     back, though it will certainly give you an <emphasis>isomorphic</emphasis>
     triangulation.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="tri-composition.png"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <tip><para>
     You can copy text from the composition box by right-clicking
     on a line of text and selecting
     <menuchoice><guimenuitem>Copy to Clipboard</guimenuitem></menuchoice>
     from the pop-up menu that appears.  This is particularly useful for
     copying dehydration strings.
    </para></tip>
   </sect3>
  </sect2>

  <sect2 id="tri-surfaceproperties">
   <title>Properties of Normal Surfaces</title>

   <para>
    Certain properties of a triangulation are defined by the types of
    normal surfaces it contains.  These properties can be found under
    the <guilabel>Surfaces</guilabel> tab in the triangulation viewer.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="tri-surfaces.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    For sufficiently large triangulations, some of these properties will
    not be calculated by default since the calculations could be quite
    slow.  If a property is listed as <literal>Unknown</literal>, press
    the corresponding <guibutton>Calculate</guibutton> button
    (and be prepared to wait).  Just how large is <quote>sufficiently
    large</quote> can be adjusted in the
    <link linkend="options-triangulation">triangulation options</link>.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="tri-s3-unknown.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="tri-s3-known.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The available properties pertaining to normal surfaces are as follows.
   </para>
   <para>
    <glosslist>
     <glossentry id="tri-prop0eff">
      <glossterm>Zero-Efficient</glossterm>
      <glossdef><para>
       Determines whether the triangulation is 0-efficient.  A
       triangulation is <firstterm>0-efficient</firstterm> if its only
       normal spheres and discs are vertex linking, and if it has no 2-sphere
       boundary components.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-propsplitting">
      <glossterm>Splitting Surface</glossterm>
      <glossdef><para>
       Determines whether the triangulation has a splitting
       surface.  A <firstterm>splitting surface</firstterm> is a compact
       normal surface consisting of precisely one quad per tetrahedron
       and no other normal (or almost normal) discs.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-prop3sphere">
      <glossterm>3-Sphere</glossterm>
      <glossdef><para>
       Determines whether this is in fact a triangulation
       of the 3-sphere.  The 0-efficiency algorithms of Jaco and
       Rubinstein <xref linkend="bib-0-efficiency"/> are used, which in
       turn include components of Rubinstein's original 3-sphere recognition
       algorithm <xref linkend="bib-rubin-3sphere1"/>,
       <xref linkend="bib-rubin-3sphere2"/>.
      </para></glossdef>
     </glossentry>
     <glossentry id="tri-prop3ball">
      <glossterm>3-Ball</glossterm>
      <glossdef><para>
       Determines whether this is a triangulation of the 3-dimensional ball.
       This computation is based on the 3-sphere recognition algorithm,
       as described above.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="tri-snappea">
   <title>&snappea; Calculations</title>

   <para>
    &snappea; is an excellent piece of software written by Jeffrey Weeks
    with a strong focus on hyperbolic 3-manifolds.  For further
    information on &snappea;, please visit the &snappy; website at
    &snappyurlraw;.
   </para>
   <para>
    Since version &snappeaintro;, portions of the &snappea; kernel
    have been built into &regina;.  As a result, more information about
    the geometries of triangulations and their underlying 3-manifolds is
    available.  This information is presented in the
    <guilabel>&snappea;</guilabel> tab in the triangulation viewer.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="tri-snappea.png"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <sect3>
    <title>Triangulation Constraints</title>
    <para>
     &snappea; calculations are not available for all
     triangulations.  In fact, a triangulation must satisfy several
     constraints before &regina; will even try to pass it to &snappea;
     for processing.  This is a conservative decision on &regina;'s part,
     and in no way reflects a bug in &snappea;'s code.
    </para>
    <para>
     Amongst other constraints, a triangulation must have no boundary
     faces and every vertex must have a torus or Klein bottle link.
     If &snappea; calculations are not available, the
     <guilabel>&snappea;</guilabel> tab will include a note giving at
     least one reason why.
    </para>
    <para>
     Note that you can bypass some of these restrictions&mdash;by
     configuring &regina; appropriately you can allow some closed
     triangulations to be passed.  See the
     <link linkend="options-snappea">&snappea; options</link>
     reference for details and relevant warnings.
    </para>
   </sect3>
   <sect3 id="tri-snappea-info">
    <title>Available Information</title>
    <para>
     When the <guilabel>&snappea;</guilabel> tab is selected, the
     &snappea; kernel attempts to solve for a complete hyperbolic
     structure.  The following results are then presented.
     <glosslist>
      <glossentry>
       <glossterm>Solution Type</glossterm>
       <glossdef><para>
        This summarises the type of solution that was found.
        Possible solution types are as follows.
        <glosslist>
         <glossentry>
          <glossterm>Tetrahedra positively oriented</glossterm>
          <glossdef><para>
           All tetrahedra are either positively oriented or flat, though the
           entire solution is not flat and no tetrahedra are degenerate.
          </para></glossdef>
         </glossentry>
         <glossentry>
          <glossterm>Contains negatively oriented tetrahedra</glossterm>
          <glossdef><para>
           The volume is positive, but some tetrahedra are negatively oriented.
          </para></glossdef>
         </glossentry>
         <glossentry>
          <glossterm>All tetrahedra flat</glossterm>
          <glossdef><para>
           All tetrahedra are flat, but none have shape 0, 1 or infinity.
          </para></glossdef>
         </glossentry>
         <glossentry>
          <glossterm>Contains degenerate tetrahedra</glossterm>
          <glossdef><para>
           At least one tetrahedron has shape 0, 1 or infinity.
          </para></glossdef>
         </glossentry>
         <glossentry>
          <glossterm>Unrecognised solution type</glossterm>
          <glossdef><para>
           The volume is zero or negative, but the solution is
           neither flat nor degenerate.
          </para></glossdef>
         </glossentry>
         <glossentry>
          <glossterm>No solution found</glossterm>
          <glossdef><para>
           The gluing equations could not be solved.
          </para></glossdef>
         </glossentry>
        </glosslist>
       </para>
       <para>
        Note that the details above are available by selecting
        <menuchoice>
         <guimenu>Help</guimenu>
         <guimenuitem>What's This?</guimenuitem>
        </menuchoice>
        from the menu and clicking on the particular solution type
        being displayed.
       </para></glossdef>
      </glossentry>
      <glossentry>
       <glossterm>Volume</glossterm>
       <glossdef><para>
        This lists the volume of the underlying 3-manifold, along with the
        estimated number of decimal places of accuracy.  Note that the
        accuracy measure is an estimate only (based on the differences
        between terms in Newton's method).
       </para></glossdef>
      </glossentry>
     </glosslist>
    </para>
   </sect3>
  </sect2>

  <sect2 id="tri-censuslookup">
   <title>Census Lookup</title>

   <para>
    &regina; ships with a number of prepackaged censuses of 3-manifold
    triangulations.
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Census Lookup</guimenuitem>
    </menuchoice>
    menu item will search for the current triangulation within all of the
    available censuses.  Any matches will be reported and noted in a new
    text packet that will be created directly beneath the current
    triangulation.
   </para>
   <para>
    For a match to occur, the triangulation does not need to use the same
    tetrahedron and face numbers as in the census; any isomorphic copy will
    suffice.
   </para>
   <para>
    The list of censuses that will be searched can be configured in
    the <link linkend="options-census">census options</link>.  All
    triangulations within each of the configured census files will be examined.
   </para>
   <para>
    By default, the censuses that are searched include censuses of
    closed orientable and non-orientable 3-manifold triangulations
    <xref linkend="bib-burton-nor8"/> <xref linkend="bib-burton-nor10"/>
    <xref linkend="bib-burton-genus"/>,
    cusped and closed hyperbolic 3-manifold triangulations
    <xref linkend="bib-cuspedcensus"/> <xref linkend="bib-closedhypcensus"/>,
    and knot and link complements (tabulated by Joe Christy).
   </para>
  </sect2>
 </sect1>

 <sect1 id="tri-modification">
  <title>Modification</title>

  <para>
   Once a triangulation has been created, a variety of options are
   available for modifying it.  Many of these modifications are found in
   the <guimenu>Triangulation</guimenu> menu &ndash; note that these
   menu items will only appear when a triangulation is currently
   being viewed, and will be performed upon this triangulation (and not
   whatever is selected in the visual packet tree).
  </para>

  <sect2 id="tri-editgluings">
   <title>Editing Tetrahedron Face Gluings</title>

   <para>
    When viewing a triangulation, the <guilabel>Gluings</guilabel> tab
    allows the user to add or remove tetrahedra and manually edit the
    gluings between tetrahedron faces.
   </para>
   <para>
    Tetrahedra can
    be added and removed using the <guilabel>Add Tet</guilabel> and
    <guilabel>Remove Tet</guilabel> buttons above the gluing editor.
   </para>
   <para>
    To change how the face is glued, click in the cell.
    If you are in direct edit mode, you can simply type a new gluing
    over top of the old one in the format described above.  If you are
    in pop-up dialog mode, a button will appear; when this button is
    clicked a dialog will appear that allows a new gluing to be
    selected.  The mode can be changed between direct edit and
    pop-up dialog in the
    <link linkend="options-triangulation">triangulation options</link>.
   </para>
   <para>
    Tetrahedra can be optionally named to help
    keep track of their roles within a triangulation.  To change the
    name of a tetrahedron, click on the cell containing the tetrahedron
    number on the left hand side of the grid.  The new name can be
    typed directly into the cell.
   </para>
  </sect2>

  <sect2 id="tri-elementarymove">
   <title>Elementary Moves</title>

   <para>
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Elementary Move</guimenuitem>
    </menuchoice>
    menu item will present a list of elementary moves that can be
    performed upon the triangulation that is currently being viewed.
    Note that since there are restrictions on when particular moves may
    be performed, some elementary moves might not be available.
   </para>
   <para>
    An elementary move will never change the topology of the
    3-manifold.  The individual moves and their restrictions are
    described in full detail in the <classname>NTriangulation</classname>
    class notes in the &regenginedocs;,
    and most are described with diagrams in Burton's PhD thesis
    <xref linkend="bib-burton-phd"/> which is available from the
    &regwebsite;.  A brief summary is provided below.
   </para>
   <para>
    <glosslist>
     <glossentry>
      <glossterm>3-2 Move</glossterm>
      <glossdef><para>
       A <firstterm>3-2 move</firstterm> about an edge of degree 3 involves
       replacing the three tetrahedra joined at that edge
       with two tetrahedra joined by a face.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>2-3 Move</glossterm>
      <glossdef><para>
       A <firstterm>2-3 move</firstterm> about a non-boundary face involves
       replacing the two tetrahedra joined at that face with three
       tetrahedra joined by an edge.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>4-4 Move</glossterm>
      <glossdef><para>
       A <firstterm>4-4 move</firstterm> about an edge of degree 4 involves
       replacing the four tetrahedra joined at that edge with four
       tetrahedra joined along a different edge in a different position.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>2-0 Move (Edge)</glossterm>
      <glossdef><para>
       A <firstterm>2-0 move</firstterm> about an edge of degree 2 involves
       taking the two tetrahedra joined at that edge and squashing them flat.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>2-0 Move (Vertex)</glossterm>
      <glossdef><para>
       A <firstterm>2-0 move</firstterm> about a vertex of degree 2 involves
       taking the two tetrahedra joined at that vertex and squashing them flat.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>2-1 Move</glossterm>
      <glossdef><para>
       A <firstterm>2-1 move</firstterm> about an edge of degree 1 involves
       merging the tetrahedron containing that edge with one of the
       tetrahedra joining it.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Open Book</glossterm>
      <glossdef><para>
       A <firstterm>book opening move</firstterm> on a face that touches
       the boundary involves ungluing that face to create two new boundary
       faces and thus exposing the tetrahedra inside to the boundary.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Close Book</glossterm>
      <glossdef><para>
       A <firstterm>book closing move</firstterm> on a boundary edge
       involves folding together the two boundary faces on either side.
       The aim of this move is to simplify the boundary of the triangulation.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Shell Boundary</glossterm>
      <glossdef><para>
       A <firstterm>boundary shelling move</firstterm> on a boundary
       tetrahedron involves simply removing that tetrahedron.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Collapse Edge</glossterm>
      <glossdef><para>
       <firstterm>Collapsing an edge</firstterm> involves taking an edge
       between two distinct vertices and collapsing that edge to a point.
       Any tetrahedra containing that edge will be flattened into faces.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="tri-orient">
   <title>Orienting the Triangulation</title>

   <para>
    TODO: Write.
   </para>
  </sect2>

  <sect2 id="tri-subdivision">
   <title>Global Subdivision</title>

   <para>
    A few routines are available for performing standard
    subdivisions on triangulations.
   </para>
   <para>
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Barycentric Subdivision</guimenuitem>
    </menuchoice>
    menu item will perform a barycentric subdivision on the
    triangulation currently being viewed.
    A <firstterm>barycentric subdivision</firstterm>
    involves taking each tetrahedron, adding new vertices at the
    centroid of the tetrahedron, the centroid of each face and the
    midpoint of each edge and joining them with edges to split the
    tetrahedron into 24 smaller tetrahedra.
   </para>
   <para>
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Truncate Ideal Vertices</guimenuitem>
    </menuchoice>
    menu item will convert the triangulation currently being viewed to
    a finite triangulation (one with no ideal vertices).  This is done by
    subdividing each tetrahedron and then truncating at the ideal
    vertices.  The resulting triangulation has each ideal or
    non-standard vertex
    converted to a real boundary component (one made from boundary faces
    of tetrahedra).
   </para>
   <note><para>
    The <guimenuitem>Truncate Ideal Vertices</guimenuitem> operation
    was called <guimenuitem>Ideal to Finite</guimenuitem> in previous
    versions of &regina;.  It was renamed to avoid confusion since
    operations are now available in both ideal-to-finite and
    finite-to-ideal directions.
   </para></note>
  </sect2>

  <sect2 id="tri-simplification">
   <title>Global Simplification</title>

   <para>
    Currently a relatively straightforward routine is available for
    simplifying a triangulation as far as possible without manual
    intervention.  Selecting the
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Simplify</guimenuitem>
    </menuchoice>
    menu item will use <link linkend="tri-elementarymove">elementary
    moves</link> to reduce the triangulation to a local minimum number
    of tetrahedra.  Note that this is not guaranteed to produce
    <emphasis>the</emphasis> minimum number of tetrahedra required.
   </para>
   <para>
    As well as performing obvious reductions, this routine tries
    random 4-4 moves as well as book opening and book closing moves if it
    cannot reduce the triangulation directly.
    It does not yet try increasing the size of the triangulation (such
    as through 2-3 moves) to escape a local minimum well in which it
    might be stuck; this is on the &todo; list.
   </para>
   <para>
    For triangulations with boundary, this routine will also try to
    make the number of boundary faces as small as possible (though again
    there are not guarantees of achieving a global minimum).
   </para>
   <tip><para>
    In cases where this faster simplification routine is ineffective,
    the more powerful but slower <link linkend="tri-make0eff">0-efficiency
    conversion</link> (described below) can be used.
   </para></tip>
  </sect2>

  <sect2 id="tri-extension">
   <title>Extensions</title>

   <para>
    Sometimes one wishes to extend a triangulation beyond its boundary,
    such as thickening the boundary, stretching it or adding new
    topological components.
   </para>
   <para>
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Make Ideal</guimenuitem>
    </menuchoice>
    menu item performs one such task.  When this menu item is selected,
    all real boundary components of the triangulation are converted into
    ideal boundary components.
   </para>
   <para>
    Specifically, each boundary component that is formed from two or
    more boundary faces is converted into a single ideal vertex.  This
    is done by gluing a tetrahedron to each boundary face, and then
    gluing these tetrahedra together to mirror the ways in
    which the boundary faces are joined.  The new vertices opposite
    the boundary faces then become identified as a single ideal vertex.
   </para>
   <para>
    One side-effect of this operation is that any spherical boundary
    components become filled in with balls (since the new vertex
    will have a spherical link, i.e., it will become an ordinary
    internal vertex).  If the triangulation has no boundary faces (i.e.,
    no real boundary components) then this operation does nothing.
   </para>
  </sect2>

  <sect2 id="tri-make0eff">
   <title>0-Efficiency</title>

   <para>
    A triangulation is <firstterm>0-efficient</firstterm> if its only
    normal spheres and discs are vertex linking, and if it has no 2-sphere
    boundary components.  Jaco and Rubinstein
    <xref linkend="bib-0-efficiency"/> prove that most minimal
    triangulations of closed orientable irreducible 3-manifolds are
    0-efficient, and in general it can be observed that 0-efficient
    triangulations tend to use relatively small numbers of tetrahedra.
   </para>
   <para>
    To convert a triangulation into a 0-efficient triangulation of the
    same underlying 3-manifold, the
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Make 0-Efficient</guimenuitem>
    </menuchoice>
    menu item can be used.  Note that, like the
    <link linkend="tri-simplification">global simplification</link>
    routine described above, there is no guarantee that the minimum
    possible number of tetrahedra will be achieved.
   </para>
   <para>
    0-efficiency conversion is currently only available for closed
    orientable triangulations.  Furthermore, if the triangulation
    represents a composite 3-manifold then it is impossible to construct
    a 0-efficient triangulation &ndash; in this case a full connected sum
    decomposition will be inserted beneath this triangulation in the
    packet tree.
   </para>

   <warning><para>
    This procedure involves an analysis of normal surfaces and can be
    very slow for large triangulations.  For a faster but perhaps less
    effective simplification of triangulations, see the
    <link linkend="tri-simplification">global simplification</link>
    routine described above.
   </para></warning>
  </sect2>

  <sect2 id="tri-cover">
   <title>Double Cover</title>

   <para>
    The
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Double Cover</guimenuitem>
    </menuchoice>
    menu item will convert a triangulation to a double cover.  Each
    non-orientable component will be converted to an orientable double
    cover, and each orientable component will simply be duplicated.
   </para>
  </sect2>

  <sect2 id="tri-cutcrush">
   <title>Cutting Along and Crushing Normal Surfaces</title>

   <para>
    A triangulation can be modified by finding a normal surface within
    it, and either cutting along that surface or crushing it to a point.
    Each operation has its advantages and disadvantages:
   </para>
   <itemizedlist>
    <listitem><para>
     Cutting along a surface will never change the topology of the
     3-manifold beyond the simple act of slicing along the surface.
     However, it has the potential to <emphasis>vastly</emphasis>
     increase the number of tetrahedra in the triangulation.
    </para></listitem>
    <listitem>
     <para>
      Crushing a surface to a point will never increase the number of
      tetrahedra (and generally will reduce it).  However, crushing can
      introduce additional unexpected changes to the topology of the
      3-manifold, and in some cases can introduce ideal vertices or
      invalid edges.  For details see
      <function><classname>NNormalSurface</classname>::crush()</function>
      in the &regenginedocs;.
     </para>
     <para>
      In general you should only crush a surface to
      a point when there are theoretical reasons to know that this is
      safe.  Examples of safe scenarios can be found in Jaco and
      Rubinstein's paper on 0-efficiency <xref linkend="bib-0-efficiency"/>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    A normal surface can be cut along or crushed as follows.
    Open a list of normal surfaces,
    select the surface to operate upon, and invoke either the
    <menuchoice>
     <guimenu>Normal Surfaces</guimenu>
     <guimenuitem>Cut Along Surface</guimenuitem>
    </menuchoice>
    or the
    <menuchoice>
     <guimenu>Normal Surfaces</guimenu>
     <guimenuitem>Crush Surface</guimenuitem>
    </menuchoice>
    menu item (note that these menu items only appear when viewing a
    normal surface list).
    A new triangulation will be created in which the surface has been
    cut along or crushed accordingly.
    The original triangulation will not be changed.
   </para>
  </sect2>
 </sect1>

 <sect1 id="tri-decomposition">
  <title>Decomposition</title>

  <para>
   Recall the analysis of <link linkend="tri-composition">combinatorial
   composition</link> described earlier.  This analysis simply involves
   searching for well-structured features that &regina; can recognise
   within a triangulation.  For triangulations without any particularly
   nice structure, the combinatorial composition may give no information
   at all (many non-minimal triangulations are like this).
  </para>

  <para>
   Here we describe some more complete decomposition tools that are
   available.  These decomposition tools are guaranteed to work on any
   triangulation, regardless of whether it is minimal and/or
   particularly well-structured.  The trade-off is that these
   decomposition tools often make heavy use of normal surfaces and can
   be quite slow for larger triangulations.
  </para>

  <sect2 id="tri-decomposition-component">
   <title>Component Decomposition</title>

   <para>
    &regina; can work with disconnected triangulations as well as
    connected triangulations.  It may be desirable at times to break a
    large disconnected triangulation into smaller separate triangulations
    for its individual components.  For this operation the
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Extract Components</guimenuitem>
    </menuchoice>
    menu item can be used.
   </para>
   <para>
    Each (connected) component triangulation will be inserted as a new
    triangulation beneath the original in the packet tree.  The
    original triangulation will remain unchanged.
   </para>
   <para>
    Unlike most of the decomposition algorithms described in this
    section, component decomposition is very fast and should perform
    without problems for very large triangulations.
   </para>
  </sect2>

  <sect2 id="tri-decomposition-connsum">
   <title>Connected Sum Decomposition</title>

   <para>
    For closed orientable connected 3-manifold triangulations,
    &regina; can in fact completely decompose the triangulation into a
    connected sum of prime 3-manifolds.
    The algorithm used is essentially the 0-efficiency algorithm of
    Jaco and Rubinstein <xref linkend="bib-0-efficiency"/>, which in turn
    relies upon Rubinstein's 3-sphere recognition algorithm
    <xref linkend="bib-rubin-3sphere1"/> <xref linkend="bib-rubin-3sphere2"/>.
   </para>

   <para>
    This decomposition can be performed using the
    <menuchoice>
     <guimenu>Triangulation</guimenu>
     <guimenuitem>Connected Sum Decomposition</guimenuitem>
    </menuchoice>
    menu item.  As before, a smaller prime triangulation for each
    summand will be inserted beneath the original triangulation in
    the packet tree, with the original triangulation remaining unchanged.
    It is guaranteed that each of the smaller prime triangulations will
    be 0-efficient (i.e., will have no non-vertex-linking normal spheres).
   </para>

   <warning><para>
    This procedure involves an analysis of normal surfaces and can be
    very slow for large triangulations.
   </para></warning>
  </sect2>
 </sect1>
</chapter>
