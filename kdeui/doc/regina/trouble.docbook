<chapter id="troubleshooting">
 <title>Troubleshooting and <acronym>FAQ</acronym></title>

 <qandaset>
  <qandadiv id="trouble-compile"><title>Compiling &regina;</title>
   <qandaentry id="trouble-devpkgs">
    <question><para>
     The <userinput>./configure</userinput> script complains that it
     cannot find <literal>libgmp</literal>, <literal>libxml2</literal>,
     <literal>libjpeg</literal> or some other library.
    </para></question>
    <answer>
     <para>
      An error such as this means that you are probably missing the
      development files for a library that you need.  If the warning
      is regarding <literal>libfoo</literal>, look
      for a package such as <literal>foo-devel</literal>,
      <literal>libfoo-devel</literal>, <literal>foo-dev</literal> or
      some similar variation that you can install.  These development
      packages contain headers and other files that the compiler needs
      in order to link against the corresponding library.
     </para>
     <para>
      For the three examples above, &debian; users would need to install
      the packages <literal>libgmp3-dev</literal>,
      <literal>libxml2-dev</literal> and <literal>libjpeg62-dev</literal>.
      &rhfedora; users would need to install the packages
      <literal>gmp-devel</literal>, <literal>libxml2-devel</literal>
      and <literal>libjpeg-devel</literal>.
     </para>
     <para>
      If you know you have the appropriate library development files
      installed and you are still seeing this error, it might be that
      the <userinput>./configure</userinput> script simply cannot find them.
      In particular, if the library has been installed in a non-standard
      location, you might need to explicitly pass its location to the
      <userinput>./configure</userinput> script.  As an example, if a
      library is installed beneath <filename>/usr/local</filename>
      with headers in <filename>/usr/local/include</filename> and
      the library itself in <filename>/usr/local/lib</filename>, you
      can pass the following options:
     </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>./configure
    --with-extra-includes=/usr/local/include
    --with-extra-libs=/usr/local/lib</userinput>
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
...
</screen>
     <para>
      Note that some libraries come with their own custom
      <userinput>./configure</userinput> options.  For instance, the
      location of the &qt; installation is specified using the option
      <option>--with-qt-dir</option>, and the location of the
      <filename>libxml2</filename> installation is specified using the
      option <option>--with-xml-prefix</option>.  Run
      <userinput>./configure --help</userinput> for details of all
      available options.
     </para>
     <para>
      Finally, please visit the online page for
      <ulink url="http://regina.sourceforge.net/buildtips.html">building
      &regina; on different distributions</ulink>, which may be able to
      give <userinput>./configure</userinput> options tailored for your
      specific type of machine.
     </para>
    </answer>
   </qandaentry>
  </qandadiv>

  <qandadiv><title>Running &regina;</title>
   <qandaentry id="troubleqn-prefix">
    <question><para>
     &regina; is missing some icons.  For example, I do not see any
     icons in the packet tree.
    </para></question>
    <answer>
     <para>
      &regina; needs to be installed in the same location as &kde;.
      For instance, if &kde; is installed beneath
      <filename>/opt/kde4</filename> then &regina; must be installed there
      also.
      If you install &regina; in the wrong location then &kde; will have
      trouble loading some of its helper files (like the tree icons).
     </para>
     <para>
      The location in which &regina; is installed is controlled at
      compile-time by passing a <option>--prefix</option> option to the
      <userinput>./configure</userinput> script.  The
      <userinput>./configure</userinput> script will generally guess the
      correct location itself, so in most cases you
      should not be passing your own <option>--prefix</option> at all.
     </para>
     <para>
      However, if you are seeing this problem, working out the correct
      <option>--prefix</option> and then rebuilding and reinstalling
      &regina; will almost certainly fix it.
     </para>
     <para>
      To find which prefix you <emphasis>should</emphasis> be using,
      search for the <userinput>kde-config</userinput> program on your
      system.  Running <userinput>kde-config --prefix</userinput> will
      report the prefix that was used for your &kde; installation.  You
      must then pass this same prefix to <userinput>./configure</userinput>.
     </para>
     <para>
      For instance, if <userinput>kde-config --prefix</userinput>
      reports <computeroutput>/usr</computeroutput> then you should
      start your &regina; build with
      <userinput>./configure --prefix=/usr</userinput> as illustrated
      below.
     </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>kde-config --prefix</userinput>
/usr
<prompt>example:~/source/regina&gt;</prompt> <userinput>./configure --prefix=/usr</userinput>
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
...
</screen>
    </answer>
   </qandaentry>

   <qandaentry id="trouble-packet-uneditable">
    <question><para>
     I cannot edit a particular packet.  I can view it but I can't change
     anything.
    </para></question>
    <answer>
     <para>
      If a packet has children that need their parent
      to remain constant, it will
      become uneditable.  An example is a triangulation that has a normal
      surface list as a child.  The normal surface list stores coordinates
      based upon the triangulation that created it, so the triangulation
      must remain constant or else the coordinates will become invalid.
     </para>
     <para>
      In such a situation you can try <link linkend="packet-clone">cloning
      the packet</link> without its subtree (<menuchoice>
       <guimenu>Packet Tree</guimenu>
       <guimenuitem>Clone Packet</guimenuitem>
      </menuchoice>).  The clone will have no children to worry about
      and so should be editable.  Alternatively you could delete the child
      packet that is refusing to allow its parent to change.
     </para>
     <para>
      Note that if a packet cannot be edited because of its children,
      it will be marked with a small padlock in the packet tree.  This is
      illustrated below for the figure eight knot complement.
     </para>
     <para>
      <inlinemediaobject>
       <imageobject>
        <imagedata fileref="padlock.png"/>
       </imageobject>
      </inlinemediaobject>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="trouble-handbook-unavailable">
    <question><para>
     I cannot open the &regina; handbook.  I try
     selecting <guilabel>Regina Handbook</guilabel> from the
     <guilabel>Help</guilabel> menu but I get an error message.
    </para></question>
    <answer>
     <para>
      First, remember that if all else fails you can download
      the handbook in &html; format directly from the &regdownloadsite;,
      or you can simply
      <ulink url="http://regina.sourceforge.net/docs/">read it online</ulink>.
     </para>
     <para>
      There are two common causes for this problem:
      (i)&nbsp;the &khelpcenter; is not installed, or
      (ii)&nbsp;the &regina; handbook is installed in the wrong location.
      <itemizedlist>
       <listitem>
        <para>
         If you get an error such as &quot;Could not launch the &kde; Help
         Center&quot; or &quot;Could not find khelpcenter executable&quot;,
         you probably do not have the &khelpcenter; installed.  Search your
         &linux; distribution for the <literal>kdebase</literal> package
         (some distributions call this <literal>kdebase3</literal>,
         <literal>kdebase-progs</literal> or
         <literal>kdebase-unified</literal>).
        </para>
       </listitem>
       <listitem><para>
        If you get an error such as &quot;There is no documentation available
        for /regina/index.html&quot;, you probably have the &regina;
        handbook installed in the wrong location.
        <itemizedlist>
         <listitem><para>
          If you installed &regina; from a ready-made package, please contact
          the package maintainer &mdash; the package has been built incorrectly
          and needs to be fixed.  If you are not sure who the maintainer is,
          please mail &reguserlist; with your problem.
         </para></listitem>
         <listitem>
          <para>
           If you built &regina; yourself from sources, you need to pass an
           extra argument to the <userinput>./configure</userinput> script.
           Try to find which directory on your system contains the &kde;
           user manuals; typically this is something like
           <filename>/usr/share/doc/kde</filename> or
           <filename>/usr/share/doc/kde/HTML</filename>.  This directory
           should have an <filename>en/</filename> subdirectory, and beneath
           that a subdirectory for each application (such as
           <filename>en/kicker</filename>, <filename>en/kate</filename> and
           so on).
          </para>
          <para>
           Once you have found this directory, pass it as a
           <option>kde_htmldir</option> argument to the
           <userinput>./configure</userinput> script (note that this
           option does not begin with <literal>--</literal>).  An example
           for a &debian; system is given below.
          </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>./configure kde_htmldir=/usr/share/doc/kde/HTML</userinput>
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
...
</screen>
         </listitem>
        </itemizedlist>
       </para></listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="trouble-pdf">
    <question><para>
     How do I view &pdf; packets?  I click on the packet but I just see
     a box with an error message.
    </para></question>
    <answer>
     <para>
      The short answer is that you should install &kpdf;, which is part of
      the official &kdegraphics; module shipped with &kde;&nbsp;3.x.
      &kpdf; provides both embedded and external &pdf; viewers, and
      &regina; knows how to use them.
     </para>
     <para>
      The long answer is that you can edit &regina;'s
      <link linkend="options-pdf">&pdf; settings</link> to display
      &pdf; packets using whatever program you choose.  &regina; will try
      its best to find a &pdf; viewer on its own if possible
      (in particular, it knows about &kpdf;, &okular;, &xpdf; and &evince;,
      as well as &previewapp; under &macosx;).  However, if your
      installation is unusual then &regina; might need a little help;
      in the &pdf; settings you can provide a full path to your
      favourite &pdf; viewer application.
     </para>
     <para>
      If you are having trouble getting &pdf; support working out of the
      box, please do send an email or
      <link linkend="services">file a bug</link> so the problem can be
      fixed in future releases.
     </para>
    </answer>
   </qandaentry>
  </qandadiv>

  <qandadiv><title>&python; Scripting</title>
   <qandaentry id="trouble-python-disabled">
    <question><para>
     &regina; tells me that &python; scripting has been disabled.
    </para></question>
    <answer>
     <para>
      This means that &regina; was not built with &python; support
      enabled.  You will need to rebuild &regina; from sources &ndash;
      instructions for doing this are provided in the file
      <filename>README.txt</filename> in the &regina; source
      distribution.
     </para>
     <para>
      When running <userinput>./configure</userinput> (the first step of
      building &regina;), watch the output carefully.  It will tell you
      whether it plans to build the &python; interface, and if not it
      should give you a clear reason why.
     </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>./configure</userinput>
...
... (lots of tests)
...
configure: WARNING: A working boost.python installation is
unavailable; the Python interface will not be built.
...
... (more tests)
...
checking whether to build the calculation engine library... yes
checking whether to build the KDE user interface... yes
checking whether to build the Python interface... no
checking whether to build command-line utilities... yes
checking whether to build MPI-enabled utilities... yes
checking whether to build the test suite... yes
checking whether to build calculation engine docs... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: creating admin/Makefile
...
... (lots more Makefiles)
...
<prompt>example:~/source/regina&gt;</prompt>
</screen>
     <para>
      The most common cause for &python; support being disabled
      is that no usable &boost-python; installation could be found at
      compile time (as illustrated above).  Make sure you have
      &boost-python; installed as described on the &sysreq;.
      If your &boost-python; is installed in a
      non-standard location you may need to pass this location to the
      <userinput>./configure</userinput> script using options
      <option>--with-extra-includes</option> and
      <option>--with-extra-libs</option>.
     </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>./configure
    --with-extra-includes=/usr/local/include
    --with-extra-libs=/usr/local/lib</userinput>
checking build system type... i686-pc-linux-gnu
checking host system type... i686-pc-linux-gnu
...
</screen>
     <para>
      Note that &boost-python; also requires the standard &python; headers to
      be installed; again see the &sysreq; for details.
     </para>
     <para>
      If none of these suggestions help, please mail &reguserlist; for
      assistance, including your <filename>config.log</filename>
      if possible to help diagnose the problem.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="trouble-python-typeerror">
    <question><para>
     While working with a &python; object I receive a
     <exceptionname>TypeError</exceptionname> with the message
     &quot;bad argument type for built-in operation&quot;.
     I know the object is valid since I've used it earlier without problems.
    </para></question>
    <answer>
     <para>
      You may have run into an unusual &boost-python; issue regarding
      ownership semantics.  If you have been rearranging the packet tree
      using <function>NPacket.insertChildFirst()</function>,
      <function>NPacket.insertChildLast()</function> or
      <function>NPacket.insertChildAfter()</function> then this is
      particularly likely.
     </para>
     <para>
      See the <link linkend="python-ownership">&python; caveats</link>
      documentation for a description of this problem and how to
      work around it.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="trouble-python-sigerror">
    <question><para>
     While calling a &python; function I receive a
     <exceptionname>Boost.Python.ArgumentError</exceptionname> with the message
     &quot;Python argument types did not match C++ signature&quot;.  I'm
     fairly sure I'm passing the right arguments.
    </para></question>
    <answer>
     <para>
      You may have run into the same unusual ownership issue with
      &boost-python; discussed in the
      <link linkend="trouble-python-typeerror">previous question</link>.
      Again, if you have been rearranging the packet tree
      using <function>NPacket.insertChildFirst()</function>,
      <function>NPacket.insertChildLast()</function> or
      <function>NPacket.insertChildAfter()</function> then this is
      particularly likely.
     </para>
     <para>
      See the <link linkend="python-ownership">&python; caveats</link>
      documentation for a description of this problem and how to
      work around it.
     </para>
     <para>
      On the other hand, it may just be that you are calling the
      function incorrectly.  You might wish to check the
      <link linkend="python-docs">calculation engine documentation</link>,
      which describes all of the available function calls and what
      arguments they should take.
     </para>
    </answer>
   </qandaentry>
  </qandadiv>

  <qandadiv><title>Miscellaneous</title>
   <qandaentry id="trouble-testsuite">
    <question><para>
     What is the test suite, and how do I run it?
    </para></question>
    <answer>
     <para>
      Sometimes, building an application on significantly different
      hardware or against different versions of helper libraries can lead
      to unforseen bugs that do not appear on the developer's machine(s).
      To help guard against such problems, &regina; ships with a test
      suite.  The test suite uses &regina; to perform a variety of
      different computations that isolate different portions of
      &regina;'s mathematical code, and it verifies that &regina; gets
      the answers correct.
     </para>
     <para>
      The test suite comes with the &regina; source distribution, and it
      assumes that you are building &regina; yourself.  Note that the
      test suite requires <application>CppUnit</application> to be
      installed, as described on the &sysreq; on the &regina; website.
     </para>
     <para>
      To build and run the test suite, simply move into the main source
      directory and type <userinput>make check</userinput>.  After the
      test suite has been compiled, you should see the individual tests
      being run as illustrated below.
     </para>
<screen>
<prompt>example:~/source/regina&gt;</prompt> <userinput>make check</userinput>
Making check in engine
make[1]: Entering directory `/home/bab/source/regina/engine'
...
... (compiling the test suite)
...
make[3]: Entering directory `/home/bab/source/regina/testsuite'
Regina calculation engine test suite

NIndexedArrayTest.basicChecks... ok.
NIndexedArrayTest.constructors... ok.
NIndexedArrayTest.swap... ok.
NIndexedArrayTest.inserts... ok.
NIndexedArrayTest.erasures... ok.
...
... (running lots more tests)
...
NAngleStructureListTest.loopC2... ok.
NCensusTest.rawCounts... ok.
NCensusTest.rawCountsPrimeMinimalOr... ok.
NCensusTest.rawCountsPrimeMinimalNor... ok.
NFacePairingTest.rawCounts... ok.


OK (54 tests)


PASS: regtestsuite
==================
All 1 tests passed
==================
make[3]: Leaving directory `/home/bab/source/regina/testsuite'
...
... (more output from make)
...
make[1]: Leaving directory `/home/bab/source/regina'
<prompt>example:~/source/regina&gt;</prompt>
</screen>
     <para>
      We see from the output above that the test suite ran as expected
      and that all tests were passed.
     </para>
    </answer>
   </qandaentry>

   <qandaentry>
    <question><para>
     Something else not described in this list has gone
     wrong.  Perhaps something crashed.  Maybe the program gave the wrong
     answer.  Or it could be just a little too slow.
    </para></question>
    <answer>
     <para>
      Please! - mail the authors and let us know.  You are welcome to
      write to us directly (our <link linkend="acknowledgements">email
      addresses are here</link>).  Or even better,
      use the <link linkend="services">&sourceforge; services</link>
      such as the bug tracking system and mailing lists so that the
      problem you report is publicly archived.
     </para>
     <para>
      This program is permanently in development.  There is a very
      long &todo; list, and chances are your problem is on it.  And
      then again chances are it's not.  So please let us know so we
      are sure to know what needs to be fixed/improved.
     </para>
    </answer>
   </qandaentry>
  </qandadiv>
 </qandaset>
</chapter>

