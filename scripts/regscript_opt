#!/bin/sh
# Script include file for regina.
# Reads runtime options and sets reasonable defaults.

# Begin guard
if [ "$read_regscript_opt" != 1 ]; then
read_regscript_opt=1

# Read includes.
. "`dirname "$0"`/scripts/regscript_misc"

# ---------- Constants ----------

# File in each options directory containing runtime options.
runtime_options=regina.conf

# ---------- Find options directories ----------

# --- Global options directory ---

# Use default if nothing is specified.
default_options_global=/etc/regina
if [ -z "$REGINA_OPTIONS_GLOBAL" ]; then
	export REGINA_OPTIONS_GLOBAL="$default_options_global"
fi

# Use nothing if it's not a directory.
if [ ! -z "$REGINA_OPTIONS_GLOBAL" ]; then
	if [ ! -d "$REGINA_OPTIONS_GLOBAL" ]; then
		warn "Warning: $REGINA_OPTIONS_GLOBAL is not a directory."
		export REGINA_OPTIONS_GLOBAL=
	fi
fi

# Warn the user if we have no global options directory.
if [ -z "$REGINA_OPTIONS_GLOBAL" ]; then
	warn "Warning: No global options directory."
else
	info "-- Global options directory (REGINA_OPTIONS_GLOBAL): $REGINA_OPTIONS_GLOBAL"
fi

# --- Local options directory ---

# Use default if nothing is specified.
# Make sure we work around old shells that don't understand ~.
if [ ! -z "$HOME" ]; then
	default_options_local="`echo "$HOME/.regina"`"
else
	default_options_local="`echo ~/.regina`"
fi
if [ -z "$REGINA_OPTIONS_LOCAL" ]; then
	export REGINA_OPTIONS_LOCAL="$default_options_local"
fi

# If it does exist, use nothing if it's not a directory.
# If it doesn't exist, try to create it.
if [ ! -z "$REGINA_OPTIONS_LOCAL" ]; then
	if [ ! -e "$REGINA_OPTIONS_LOCAL" ]; then
		if ! mkdir "$REGINA_OPTIONS_LOCAL"; then
			warn "Warning: $REGINA_OPTIONS_LOCAL could not be created."
			export REGINA_OPTIONS_LOCAL=
		fi
	elif [ ! -d "$REGINA_OPTIONS_LOCAL" ]; then
		warn "Warning: $REGINA_OPTIONS_LOCAL is not a directory."
		export REGINA_OPTIONS_LOCAL=
	fi
fi

# Warn the user if we have no local options directory.
if [ -z "$REGINA_OPTIONS_LOCAL" ]; then
	warn "Warning: No local options directory."
else
	info "-- Local options directory (REGINA_OPTIONS_LOCAL): $REGINA_OPTIONS_LOCAL"
fi

# ---------- Read options files ----------

# Read the global runtime options file.
if [ ! -z "$REGINA_OPTIONS_GLOBAL" ]; then
	options="$REGINA_OPTIONS_GLOBAL/$runtime_options"
	if [ -f "$options" ]; then
		optioncmds=`awk -f "$REGINA_HOME/scripts/regscript_readopts" "$options"`
		eval $optioncmds;
	elif [ -e "$options" ]; then
		warn "Warning: Options file [$options] is not a regular file."
	else
		warn "Warning: No global runtime options file [$options]."
	fi
fi

# Read the local runtime options file.
if [ ! -z "$REGINA_OPTIONS_LOCAL" ]; then
	options="$REGINA_OPTIONS_LOCAL/$runtime_options"
	if [ -f "$options" ]; then
		optioncmds=`awk -f "$REGINA_HOME/scripts/regscript_readopts" "$options"`
		eval $optioncmds;
	elif [ -e "$options" ]; then
		warn "Warning: Options file [$options] is not a regular file."
	else
		warn "Warning: No local runtime options file [$options]."
	fi
fi

# ---------- Set defaults and run sanity checks ----------

if [ -z "$REGINA_BTOOLS" ]; then
	export REGINA_BTOOLS="$REGINA_HOME/lib/btools.jar"
fi
if [ ! -e "$REGINA_BTOOLS" ]; then
	error "Error: The BTools library could not be found."
	error "       Set \$REGINA_BTOOLS to the location of btools.jar"
	error "       and try again."
	exit 1
fi

if [ -z "$REGINA_JYTHON" ]; then
	export REGINA_JYTHON="$REGINA_HOME/lib/jython.jar"
fi
if [ ! -e "$REGINA_JYTHON" ]; then
	warn "Warning: The Jython library could not be found."
	warn "         Scripting will not be available."
	warn "         To fix this, set \$REGINA_JYTHON to the location"
	warn "         of jython.jar and try again."
fi

if [ -z "$REGINA_JAVAHELP" ]; then
	export REGINA_JAVAHELP="$REGINA_HOME/lib/jh.jar"
fi
if [ ! -e "$REGINA_JAVAHELP" ]; then
	warn "Warning: The JavaHelp library could not be found."
	warn "         The built-in help browser will not be available."
	warn "         To fix this, set \$REGINA_JAVAHELP to the location"
	warn "         of jh.jar and try again."
fi

if [ -z "$REGINA_JAVA" ]; then
	# Take the Java runtime from the path.
	export REGINA_JAVA=`which java`
	if [ -z "$REGINA_JAVA" ]; then
		error "Error: A Java runtime could not be found."
		error "       Set \$REGINA_JAVA to a Java runtime (such as /usr/bin/java)"
		error "       and try again."
		exit 1
	fi
fi

if [ -z "$REGINA_JNIDIR" ]; then
	export REGINA_JNIDIR="$REGINA_HOME/bin"
fi
if [ -z "$REGINA_JNIENGINE" ]; then
	jnilib="regina-engine-jni"
else
	jnilib="$REGINA_JNIENGINE"
fi
if [ "$OSTYPE" = "cygwin" ]; then
	jnilib="$jnilib.dll"
else
	jnilib="lib$jnilib.so"
fi
if [ ! -e "$REGINA_JNIDIR/$jnilib" ]; then
	warn "Warning: The JNI library directory could not be found."
	warn "         The JNI calculation engine will not be available."
	warn "         To fix this, set \$REGINA_JNIDIR to the directory"
	warn "         containing $jnilib and try again."
fi

if [ -z "$REGINA_JARDIR" ]; then
	export REGINA_JARDIR="$REGINA_HOME/bin"
fi
if [ ! -e "$REGINA_JARDIR/regina.jar" ]; then
	error "Error: The Regina jar directory could not be found."
	error "       Set \$REGINA_JAR to the directory containing regina.jar"
	error "       and try again."
	exit 1
fi

if [ -z "$REGINA_CACHEDIR" ]; then
	if [ ! -z "$REGINA_OPTIONS_LOCAL" ]; then
		export REGINA_CACHEDIR="$REGINA_OPTIONS_LOCAL/cache"
	fi
fi
if [ ! -z "$REGINA_CACHEDIR" ]; then
	if [ ! -e "$REGINA_CACHEDIR" ]; then
		if ! mkdir "$REGINA_CACHEDIR"; then
			warn "Warning: $REGINA_CACHEDIR could not be created."
			export REGINA_CACHEDIR=
		fi
	elif [ ! -d "$REGINA_CACHEDIR" ]; then
		warn "Warning: $REGINA_CACHEDIR is not a directory."
		export REGINA_CACHEDIR=
	fi
fi
if [ -z "$REGINA_CACHEDIR" ]; then
	warn "Warning: You have no Jython cache directory."
	warn "         You may not be able to use Jython scripting, or you may"
	warn "         find a \"package\" directory inadvertently created in the"
	warn "         current directory (which is safe to delete)."
	warn "         To fix this problem, set \$REGINA_CACHEDIR to a cache"
	warn "         directory to which you have write access and try again."
fi

if [ ! -z "$REGINA_ENGINE" ]; then
	if ! testvalue "$REGINA_ENGINE" REGINA_ENGINE jni corba; then
		export REGINA_ENGINE=""
	fi
fi

if [ ! -z "$REGINA_INTERFACE" ]; then
	if ! testvalue "$REGINA_INTERFACE" REGINA_INTERFACE gui console text; then
		export REGINA_INTERFACE=""
	fi
fi

# ---------- Output current options ----------

info ""
info "----- Configuration options -----"
info "-- BTools classes (REGINA_BTOOLS): $REGINA_BTOOLS"
info "-- Jython classes (REGINA_JYTHON): $REGINA_JYTHON"
info "-- JavaHelp classes (REGINA_JAVAHELP): $REGINA_JAVAHELP"
info "-- Extra classes (REGINA_EXTRA_CLASSES): $REGINA_EXTRA_CLASSES"
info "-- Java runtime (REGINA_JAVA): $REGINA_JAVA"
info "-- JNI library directory (REGINA_JNIDIR): $REGINA_JNIDIR"
info "-- Regina jar directory (REGINA_JARDIR): $REGINA_JARDIR"
info "-- Jython cache directory (REGINA_CACHEDIR): $REGINA_CACHEDIR"
info ""
info "----- Startup options (excluding command-line options) -----"
info "-- Computational engine (REGINA_ENGINE): $REGINA_ENGINE"
info "-- User interface (REGINA_INTERFACE): $REGINA_INTERFACE"
info "-- JNI engine name (REGINA_JNIENGINE): $REGINA_JNIENGINE"
info "-- CORBA host (REGINA_CORBAHOST): $REGINA_CORBAHOST"
info "-- CORBA port (REGINA_CORBAPORT): $REGINA_CORBAPORT"
info ""

# ---------- Export current options ----------

export REGINA_BTOOLS
export REGINA_JYTHON
export REGINA_JAVAHELP
export REGINA_EXTRA_CLASSES
export REGINA_JAVA
export REGINA_JNIDIR
export REGINA_JARDIR
export REGINA_CACHEDIR
export REGINA_ENGINE
export REGINA_INTERFACE
export REGINA_JNIENGINE
export REGINA_CORBAHOST
export REGINA_CORBAPORT

# End guard
fi

