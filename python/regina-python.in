#!/bin/sh
#
# Regina - A Normal Surface Theory Calculator
# Python Startup Script
#
# Copyright (c) 2002-2003, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# This script simply starts the Python interpreter and imports the Regina
# calculation engine, i.e., the module 'regina'.
#
# DO NOT EDIT THIS FILE DIRECTLY.  It has been automatically generated
# by configure and any changes will be overwritten.  Try editing
# regina-python.in instead.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
set -e

# --- Constants. ---

# Address to which questions should be emailed.
regina_support="regina-user@lists.sourceforge.net"
default_verbosity=1

# --- Diagnostic output routines. ---

# Send the given error message to stderr.
# Usage: error <message>
error () {
  echo "$1" 1>&2
}

# Send the given warning message to stderr if $REGINA_VERBOSITY >= 1.
# Usage: warn <message>
warn () {
  if [ 1 -le "$REGINA_VERBOSITY" ]; then
    echo "$1" 1>&2
  fi
}

# Send the given information message to stderr if $REGINA_VERBOSITY >= 2.
# Usage: info <message>
info () {
  if [ 2 -le "$REGINA_VERBOSITY" ]; then
    echo "$1" 1>&2
  fi
}

# --- Base Regina directory and package name. ---

# Variables set:
#
#   REGINA_HOME: See reference manual; this is only set if it's not already
#                in the environment.
#   REGINA_PACKAGE: The package name for the Regina installation we are using.
#   REGINA_PKGLIBDIR: The directory in which the Python module has been
#                     (or will be) installed.
#   REGINA_FROMSOURCE: 1 if we're running directly from the source tree,
#                      0 if we're running from an installation.

datadir=@datadir@
libdir=@libdir@

# Are we running directly from the source tree?
if [ -f "$0.in" -a -f "`dirname "$0"`/../admin/ac_gen" ]; then
  export REGINA_FROMSOURCE=1
  export REGINA_PACKAGE="regina"
  default_regina_home="`dirname "$0"`/.."
else
  export REGINA_FROMSOURCE=0
  export REGINA_PACKAGE="@PACKAGE@"
  default_regina_home="$datadir/@PACKAGE@"
fi
export REGINA_PKGLIBDIR="$libdir/@PACKAGE@"

# Derive REGINA_HOME if nothing is specified.
if [ -z "$REGINA_HOME" ]; then
  export REGINA_HOME="$default_regina_home"
fi

# Check REGINA_HOME is an appropriate value.
if [ ! -f "$REGINA_HOME/scripts/regscript_opt" ]; then
  error "Error: \$REGINA_HOME should be set to the base Regina directory."
  error "       This is the directory containing the \"scripts\" subdirectory,"
  error "       the \"icons\" subdirectory and so on."
  error "       It is currently set to $REGINA_HOME."
  exit 1
fi

# --- Check command-line options. ---

while [ "$#" != 0 ]; do
  case "$1" in
    --verbose | -v )
      export REGINA_VERBOSITY=2
      ;;
    --quiet | -q )
      export REGINA_VERBOSITY=0
      ;;
    -* )
      error "Error: Unknown option $1."
      exit 1
      ;;
    * )
      # We've found a script to run.
      break
      ;;
  esac
  shift
done

# --- Decide upon a verbosity level. ---

# Use default verbosity if nothing is specified.
if [ -z "$REGINA_VERBOSITY" ]; then
    export REGINA_VERBOSITY="$default_verbosity"
fi

# Check that the verbosity is an appropriate value.
case "$REGINA_VERBOSITY" in
    [012] )
    ;;
    * )
        error "Error: \$REGINA_VERBOSITY should be 0, 1 or 2."
        error "       (0 = errors, 1 = errors/warnings, 2 = everything)"
        exit 1
    ;;
esac

# Now we have established our verbosity level, output $REGINA_HOME and
# $REGINA_VERBOSITY if appropriate.
info "-- Verbosity level (REGINA_VERBOSITY): $REGINA_VERBOSITY"
info "-- Regina home directory (REGINA_HOME): $REGINA_HOME"

# --- Read runtime options. ---

. "$REGINA_HOME/scripts/regscript_opt"

# --- Set the python path and run the application. ---

export PYTHONPATH="$REGINA_PYLIBDIR:$PYTHONPATH"
info "Python interpreter: $REGINA_PYTHON"
info "Python path: $PYTHONPATH"

if [ -n "$1" ]; then
    # Run the given script.
    if [ ! -e "$1" ]; then
        error "Error: The script $1 does not exist."
        exit 1
    fi
    if "$REGINA_PYTHON" "$REGINA_HOME/scripts/runscript.py" -- "$@"; then
        exit 0
    fi
else
    # Start an interactive interpreter.
    if "$REGINA_PYTHON" -i "$REGINA_HOME/scripts/runscript.py"; then
        exit 0
    fi
fi

error
error "################################"
error "#                              #"
error "#            REGINA            #"
error "#                              #"
error "#  Could not run application!  #"
error "#                              #"
error "################################"
error
error "An error occurred whilst trying to run the application.  Use:"
error
error "    $0 --verbose"
error
error "to see more diagnostic output such as the runtime options"
error "that are being used.  You may wish to verify that these"
error "options are correct and edit the runtime options file(s)"
error "if appropriate."
error
error "If you still can't run the application, please mail"
error "$regina_support for assistance."
error
exit 1

