diff --git a/python/pybind11/functional.h b/python/pybind11/functional.h
index 4034990d8..ab423203c 100644
--- a/python/pybind11/functional.h
+++ b/python/pybind11/functional.h
@@ -82,12 +82,18 @@ public:
             }
             func_handle(const func_handle &f_) { operator=(f_); }
             func_handle &operator=(const func_handle &f_) {
-                gil_scoped_acquire acq;
+                // Called on the way into a Regina function that expects
+                // a std::function argument.  In such situations the
+                // interpreter should already be holding the GIL.
+                // gil_scoped_acquire acq;
                 f = f_.f;
                 return *this;
             }
             ~func_handle() {
-                gil_scoped_acquire acq;
+                // Called on the way into and also out of a Regina function
+                // that expects a std::function argument.  In such situations
+                // the interpreter should already be holding the GIL.
+                // gil_scoped_acquire acq;
                 function kill_f(std::move(f));
             }
         };
@@ -97,7 +103,10 @@ public:
             func_handle hfunc;
             explicit func_wrapper(func_handle &&hf) noexcept : hfunc(std::move(hf)) {}
             Return operator()(Args... args) const {
-                gil_scoped_acquire acq;
+                // Called when a std::function is executed as a callback within
+                // one of Regina's own functions.  In such situations Regina's
+                // Python bindings are responsible for ensuring the GIL is held.
+                // gil_scoped_acquire acq;
                 // casts the returned object as a rvalue to the return type
                 return hfunc.f(std::forward<Args>(args)...).template cast<Return>();
             }
diff --git a/python/pybind11/gil.h b/python/pybind11/gil.h
index a0b5de151..5fa4df1ae 100644
--- a/python/pybind11/gil.h
+++ b/python/pybind11/gil.h
@@ -199,4 +199,30 @@ class gil_scoped_release {
 };
 #endif
 
+/**
+ * A less lightweight version of gil_scoped_acquire that actually checks
+ * whether we are already holding the GIL before trying to acquire it.
+ *
+ * This is needed in scenarios with multiple subinterpreters, where pybind11
+ * could otherwise causes deadlocks because its TLS mechanism implicitly (and
+ * incorrectly) assumes that different subinterpreters must be running
+ * from different native OS threads.
+ *
+ * - Ben Burton, 30/09/2022.
+ */
+class safe_gil_scoped_acquire {
+    gil_scoped_acquire* gil { nullptr };
+public:
+    safe_gil_scoped_acquire() {
+        if (! PyGILState_Check())
+            gil = new gil_scoped_acquire();
+    }
+    ~safe_gil_scoped_acquire() {
+        delete gil;
+    }
+    safe_gil_scoped_acquire(const safe_gil_scoped_acquire&) = delete;
+    safe_gil_scoped_acquire& operator = (const safe_gil_scoped_acquire&) =
+        delete;
+};
+
 PYBIND11_NAMESPACE_END(PYBIND11_NAMESPACE)
diff --git a/python/pybind11/iostream.h b/python/pybind11/iostream.h
index 1878089e3..60586b9d7 100644
--- a/python/pybind11/iostream.h
+++ b/python/pybind11/iostream.h
@@ -93,7 +93,7 @@ private:
     // This function must be non-virtual to be called in a destructor.
     int _sync() {
         if (pbase() != pptr()) { // If buffer is not empty
-            gil_scoped_acquire tmp;
+            safe_gil_scoped_acquire tmp;
             // This subtraction cannot be negative, so dropping the sign.
             auto size = static_cast<size_t>(pptr() - pbase());
             size_t remainder = utf8_remainder();
diff --git a/python/pybind11/pybind11.h b/python/pybind11/pybind11.h
index d61dcd5c7..bcd0b297c 100644
--- a/python/pybind11/pybind11.h
+++ b/python/pybind11/pybind11.h
@@ -47,6 +47,10 @@
 #    pragma GCC diagnostic ignored "-Wnoexcept-type"
 #endif
 
+namespace regina {
+    const char* pythonTypename(const std::type_info*);
+}
+
 PYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)
 
 PYBIND11_NAMESPACE_BEGIN(detail)
@@ -433,15 +437,29 @@ protected:
                 if (!t) {
                     pybind11_fail("Internal error while parsing type signature (1)");
                 }
-                if (auto *tinfo = detail::get_type_info(*t)) {
+                if (const char* name = regina::pythonTypename(t)) {
+                    signature += name;
+                } else if (auto *tinfo = detail::get_type_info(*t)) {
                     handle th((PyObject *) tinfo->type);
-                    signature += th.attr("__module__").cast<std::string>() + "."
-                                 + th.attr("__qualname__").cast<std::string>();
+                    const auto m = th.attr("__module__").cast<std::string>();
+                    if (m == "regina.engine")
+                        signature += "regina." +
+                            th.attr("__qualname__").cast<std::string>();
+                    else
+                        signature +=
+                            th.attr("__module__").cast<std::string>() + "." +
+                            th.attr("__qualname__").cast<std::string>();
                 } else if (rec->is_new_style_constructor && arg_index == 0) {
                     // A new-style `__init__` takes `self` as `value_and_holder`.
                     // Rewrite it to the proper class type.
-                    signature += rec->scope.attr("__module__").cast<std::string>() + "."
-                                 + rec->scope.attr("__qualname__").cast<std::string>();
+                    const auto m = rec->scope.attr("__module__").cast<std::string>();
+                    if (m == "regina.engine")
+                        signature += "regina."
+                            + rec->scope.attr("__qualname__").cast<std::string>();
+                    else
+                        signature +=
+                        rec->scope.attr("__module__").cast<std::string>() + "."
+                            + rec->scope.attr("__qualname__").cast<std::string>();
                 } else {
                     std::string tname(t->name());
                     detail::clean_type_id(tname);
@@ -2627,13 +2645,13 @@ void print(Args &&...args) {
 
 inline void
 error_already_set::m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr) {
-    gil_scoped_acquire gil;
+    safe_gil_scoped_acquire gil;
     error_scope scope;
     delete raw_ptr;
 }
 
 inline const char *error_already_set::what() const noexcept {
-    gil_scoped_acquire gil;
+    safe_gil_scoped_acquire gil;
     error_scope scope;
     return m_fetched_error->error_string().c_str();
 }
@@ -2748,7 +2766,7 @@ function get_override(const T *this_ptr, const char *name) {
 
 #define PYBIND11_OVERRIDE_IMPL(ret_type, cname, name, ...)                                        \
     do {                                                                                          \
-        pybind11::gil_scoped_acquire gil;                                                         \
+        pybind11::safe_gil_scoped_acquire gil;                                                         \
         pybind11::function override                                                               \
             = pybind11::get_override(static_cast<const cname *>(this), name);                     \
         if (override) {                                                                           \
