Help on instancemethod in module regina.engine:

boundaryComponents(...)
    boundaryComponents(self: regina.Triangulation6) -> <internal>.ListView[regina.BoundaryComponent6]

Help on instancemethod in module regina.engine:

components(...)
    components(self: regina.Triangulation6) -> <internal>.ListView[regina.Component6]

Help on instancemethod in module regina.engine:

faces(...)
    faces(self: regina.Triangulation6, arg0: int) -> Union[<internal>.ListView[regina.Vertex6], <internal>.ListView[regina.Edge6], <internal>.ListView[regina.Triangle6], <internal>.ListView[regina.Tetrahedron6], <internal>.ListView[regina.Pentachoron6], <internal>.ListView[regina.Face6_5]]

Help on instancemethod in module regina.engine:

face(...)
    face(self: regina.Triangulation6, arg0: int, arg1: int) -> Union[regina.Vertex6, regina.Edge6, regina.Triangle6, regina.Tetrahedron6, regina.Pentachoron6, regina.Face6_5]

Help on instancemethod in module regina.engine:

simplices(...)
    simplices(self: regina.Triangulation6) -> <internal>.ListView[regina.Simplex6]

Help on instancemethod in module regina.engine:

faces(...)
    faces(self: regina.Triangulation4, arg0: int) -> Union[<internal>.ListView[regina.Vertex4], <internal>.ListView[regina.Edge4], <internal>.ListView[regina.Triangle4], <internal>.ListView[regina.Tetrahedron4]]

Help on instancemethod in module regina.engine:

face(...)
    face(self: regina.Triangulation4, arg0: int, arg1: int) -> Union[regina.Vertex4, regina.Edge4, regina.Triangle4, regina.Tetrahedron4]

Help on instancemethod in module regina.engine:

embeddings(...)
    embeddings(self: regina.Vertex6) -> <internal>.ListView[regina.VertexEmbedding6]

Help on instancemethod in module regina.engine:

embeddings(...)
    embeddings(self: regina.Vertex3) -> <internal>.ListView[regina.VertexEmbedding3]

Help on instancemethod in module regina.engine:

vertex(...)
    vertex(self: regina.Edge6, arg0: int) -> regina.Vertex6

Help on instancemethod in module regina.engine:

triangulation(...)
    triangulation(self: regina.BoundaryComponent3) -> regina.Triangulation3

Help on instancemethod in module regina.engine:

packet(...)
    packet(self: regina.Link) -> regina.PacketOfLink
    
    Returns the packet that holds this data, if there is one.
    
    If this object is being held by a packet *p* of type PacketOf<Held>,
    then that packet *p* will be returned. Otherwise, if this is a
    "standalone" object of type Held, then this routine will return
    ``null``.
    
    There is a special case when dealing with a packet *q* that holds a
    SnapPea triangulation. Here *q* is of type
    PacketOf<SnapPeaTriangulation>, and it holds a Triangulation<3>
    "indirectly" in the sense that Packetof<SnapPeaTriangulation> derives
    from SnapPeaTriangulation, which in turn derives from
    Triangulation<3>. In this scenario:
    
    * calling Triangulation<3>::packet() will return ``null``, since there
      is no "direct" PacketOf<Triangulation<3>>;
    
    * calling SnapPeaTriangulation::packet() will return the enclosing
      packet *q*, since there is a PacketOf<SnapPeaTriangulation>;
    
    * calling the special routine Triangulation<3>::inAnyPacket() will
      also return the "indirect" enclosing packet *q*.
    
    The function inAnyPacket() is specific to Triangulation<3>, and is not
    offered for other *Held* types.
    
    Returns:
        the packet that holds this data, or ``null`` if this data is not
        (directly) held by a packet.

Help on instancemethod in module regina.engine:

__init__(...)
    __init__(*args, **kwargs)
    Overloaded function.
    
    1. __init__(self: regina.Integer) -> None
    
    Initialises this integer to zero.
    
    2. __init__(self: regina.Integer, arg0: int) -> None
    
    Initialises this integer to the given value.
    
    Python:
        In Python, this is the only native-integer constructor available.
    
    Parameter ``value``:
        the new value of this integer.
    
    3. __init__(self: regina.Integer, arg0: regina.Integer) -> None
    
    Initialises this integer to the given value.
    
    Parameter ``value``:
        the new value of this integer.
    
    4. __init__(self: regina.Integer, arg0: regina.LargeInteger) -> None
    
    Initialises this integer to the given value.
    
    Precondition:
        The given integer is not infinite.
    
    Parameter ``value``:
        the new value of this integer.
    
    5. __init__(self: regina.Integer, arg0: int) -> None
    
    Initialises this to the given Python arbitrary-precision integer.
    
    The argument is of the Python type ``long``, which Python uses to
    store integers of arbitrary magnitude (much like Regina does with its
    Integer and LargeInteger classes).
    
    Parameter ``value``:
        the new value of this integer.
    
    6. __init__(self: regina.Integer, arg0: float) -> None
    
    Initialises this integer to the truncation of the given real number.
    
    Parameter ``value``:
        the real number to be truncated.
    
    7. __init__(self: regina.Integer, arg0: str, base: int = 10) -> None
    
    Initialises this integer to the given value which is represented as a
    string of digits in a given base.
    
    If not specified, the base defaults to 10. If the given base is zero,
    the base will be automatically determined. If the given string begins
    with ``0x`` or ``0X``, the base will be assumed to be 16. Otherwise,
    if the string begins with ``0``, the base will be assumed to be 8.
    Otherwise it will be taken as base 10.
    
    If the template argument *supportInfinity* is ``True``, then any
    string beginning with "inf" (after any initial whitesapce) will be
    interpreted as infinity.
    
    Whitespace may be present at the beginning or the end of the given
    string, and will simply be ignored.
    
    For finer details on how the string parsing works, see strtol() from
    the standard C library (on which this method is based).
    
    Precondition:
        The given base is zero, or is between 2 and 36 inclusive.
    
    Precondition:
        The given string represents an integer in the given base, with
        optional whitespace beforehand.
    
    Exception ``InvalidArgument``:
        The given string was not a valid large integer representation.
    
    Parameter ``value``:
        the new value of this integer, represented as a string of digits
        in base *base*.
    
    Parameter ``base``:
        the base in which *value* is given.

Help on instancemethod in module regina.engine:

__init__(...)
    __init__(*args, **kwargs)
    Overloaded function.
    
    1. __init__(self: regina.LargeInteger) -> None
    
    Initialises this integer to zero.
    
    2. __init__(self: regina.LargeInteger, arg0: int) -> None
    
    Initialises this integer to the given value.
    
    Python:
        In Python, this is the only native-integer constructor available.
    
    Parameter ``value``:
        the new value of this integer.
    
    3. __init__(self: regina.LargeInteger, arg0: regina.LargeInteger) -> None
    
    Initialises this integer to the given value.
    
    Parameter ``value``:
        the new value of this integer.
    
    4. __init__(self: regina.LargeInteger, arg0: regina.Integer) -> None
    
    Initialises this integer to the given value.
    
    Precondition:
        The given integer is not infinite.
    
    Parameter ``value``:
        the new value of this integer.
    
    5. __init__(self: regina.LargeInteger, arg0: int) -> None
    
    Initialises this to the given Python arbitrary-precision integer.
    
    The argument is of the Python type ``long``, which Python uses to
    store integers of arbitrary magnitude (much like Regina does with its
    Integer and LargeInteger classes).
    
    Parameter ``value``:
        the new value of this integer.
    
    6. __init__(self: regina.LargeInteger, arg0: float) -> None
    
    Initialises this integer to the truncation of the given real number.
    
    Parameter ``value``:
        the real number to be truncated.
    
    7. __init__(self: regina.LargeInteger, arg0: str, base: int = 10) -> None
    
    Initialises this integer to the given value which is represented as a
    string of digits in a given base.
    
    If not specified, the base defaults to 10. If the given base is zero,
    the base will be automatically determined. If the given string begins
    with ``0x`` or ``0X``, the base will be assumed to be 16. Otherwise,
    if the string begins with ``0``, the base will be assumed to be 8.
    Otherwise it will be taken as base 10.
    
    If the template argument *supportInfinity* is ``True``, then any
    string beginning with "inf" (after any initial whitesapce) will be
    interpreted as infinity.
    
    Whitespace may be present at the beginning or the end of the given
    string, and will simply be ignored.
    
    For finer details on how the string parsing works, see strtol() from
    the standard C library (on which this method is based).
    
    Precondition:
        The given base is zero, or is between 2 and 36 inclusive.
    
    Precondition:
        The given string represents an integer in the given base, with
        optional whitespace beforehand.
    
    Exception ``InvalidArgument``:
        The given string was not a valid large integer representation.
    
    Parameter ``value``:
        the new value of this integer, represented as a string of digits
        in base *base*.
    
    Parameter ``base``:
        the base in which *value* is given.

Help on ListView object:

class ListView(pybind11_object)
 |  A lightweight object that can be used for iteration and random access
 |  to all elements of a given list.
 |  
 |  Typically a ListView would be returned from a class member function to
 |  grant the user some basic read-only access to a much richer private
 |  data structure, in a way that allows the internal data structure to
 |  change at some later date without affecting the public API.
 |  
 |  The ListView class supports two different ways of representing a list:
 |  
 |  * If your list is stored using a container class (e.g., std::vector or
 |    regina::MarkedVector), then you can create a ListView directly from
 |    the container using the syntax ``ListView(container)``. This uses
 |    the generic ListView<Container> class template. There is no need to
 |    explicitly specify the ListView template arguments.
 |  
 |  * If your list is stored using a C-style array, you can create a
 |    ListView using either the syntax ``ListView(array, size)`` or
 |    ``ListView(begin, end)``. Here *begin* and *end* are an iterator
 |    pair (that is, ``begin == array`` and ``end == array + size``). This
 |    syntax uses the specialised ListView<Element*> class template.
 |    Again, there is no need to explicitly specify the ListView template
 |    arguments.
 |  
 |  End users should always store ListView objects using ``auto``, not by
 |  explicitly writing out the full ListView type. One reason for this is
 |  that, if/when Regina moves to C++20, the ListView class will most
 |  likely be removed completely (in favour of the new C++20 ranges
 |  library).
 |  
 |  ListView objects are small enough to pass by value and swap with
 |  std::swap(), with no need for any specialised move operations or swap
 |  functions.
 |  
 |  Python:
 |      The ListView classes are deliberately difficult to access: they
 |      live within their own private Python namespaces, and are all give
 |      the same class name (*ListView*). You would typically only
 |      interact with a ListView when it is returned from a function
 |      (e.g., ``Link.crossings()``), and in most cases you would simply
 |      iterate over this resulting ListView without ever knowing its
 |      exact type.
 |  
 |  Template parameter ``Container``:
 |      the internal type of the list that this object grants access to.
 |      This type must support at least the same operations as this class
 |      itself, except for the copy semantics. In particular, both
 |      std::vector and regina::MarkedVector types (as well as many other
 |      standard container types) are suitable.
 |  
 |  Method resolution order:
 |      ListView
 |      pybind11_object
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __eq__(...)
 |      __eq__(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. __eq__(self: <internal>.ListView[regina.Vertex3], arg0: <internal>.ListView[regina.Vertex3]) -> bool
 |      
 |      Determines whether this and the given list view are accessing the same
 |      underlying container.
 |      
 |      Here the containers are compared by *reference* (i.e., they must be
 |      the same container object at the same location in memory; it is not
 |      enough to be two containers with identical contents).
 |      
 |      Parameter ``other``:
 |          the list view to compare with this.
 |      
 |      Returns:
 |          ``True`` if and only if this and the given list use the same
 |          underlying container.
 |      
 |      2. __eq__(self: <internal>.ListView[regina.Vertex3], arg0: None) -> bool
 |      
 |      Always returns ``False``, since an object of this type is never equal
 |      to ``None``.
 |  
 |  __getitem__(...)
 |      __getitem__(self: <internal>.ListView[regina.Vertex3], arg0: int) -> regina.Vertex3
 |      
 |      Returns the requested element of this list.
 |      
 |      Parameter ``index``:
 |          indicates which element to return; this must be between 0 and
 |          size()-1 inclusive.
 |      
 |      Returns:
 |          the (*index*)th element in this list.
 |  
 |  __init__(...)
 |      __init__(self: pybind11_builtins.ListView, arg0: <internal>.ListView[regina.Vertex3]) -> None
 |      
 |      Creates a new copy of the given list view.
 |  
 |  __iter__(...)
 |      __iter__(self: <internal>.ListView[regina.Vertex3]) -> Iterator
 |      
 |      Returns a Python iterator over the elements of this list.
 |      
 |      Returns:
 |          an iterator over the elements of this list.
 |  
 |  __ne__(...)
 |      __ne__(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. __ne__(self: <internal>.ListView[regina.Vertex3], arg0: <internal>.ListView[regina.Vertex3]) -> bool
 |      
 |      Determines whether this and the given list view are accessing
 |      different underlying containers.
 |      
 |      Here the containers are compared by *reference* (i.e., to be
 |      considered equal they must be the same container object at the same
 |      location in memory; it is not enough to be two containers with
 |      identical contents).
 |      
 |      Parameter ``other``:
 |          the list view to compare with this.
 |      
 |      Returns:
 |          ``True`` if and only if this and the given list use different
 |          underlying containers.
 |      
 |      2. __ne__(self: <internal>.ListView[regina.Vertex3], arg0: None) -> bool
 |      
 |      Always returns ``True``, since an object of this type is never equal
 |      to ``None``.
 |  
 |  back(...)
 |      back(self: <internal>.ListView[regina.Vertex3]) -> regina.Vertex3
 |      
 |      Returns the last element of this list.
 |      
 |      Precondition:
 |          This list is not empty.
 |      
 |      Returns:
 |          the last element in this list.
 |  
 |  empty(...)
 |      empty(self: <internal>.ListView[regina.Vertex3]) -> bool
 |      
 |      Determines if this list is empty.
 |      
 |      Returns:
 |          ``True`` if and only if this list is empty.
 |  
 |  front(...)
 |      front(self: <internal>.ListView[regina.Vertex3]) -> regina.Vertex3
 |      
 |      Returns the first element of this list.
 |      
 |      Precondition:
 |          This list is not empty.
 |      
 |      Returns:
 |          the first element in this list.
 |  
 |  size(...)
 |      size(self: <internal>.ListView[regina.Vertex3]) -> int
 |      
 |      Returns the number of elements in this list.
 |      
 |      Returns:
 |          the number of elements.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
 |  
 |  __pybind11_module_local__ = ...
 |  
 |  equalityType = <EqualityType.BY_VALUE: 1>
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pybind11_object:
 |  
 |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
 |      Create and return a new object.  See help(type) for accurate signature.

