# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2023, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests the behaviour of change spans
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

# ----- Links -----

# Operations that should clear all properties:

k = ExampleLink.trefoil()
print(k.brief(), k.jones())
print(k.knowsJones())
k.reflect()
print(k.knowsJones())
print(k.brief(), k.jones())
print()

k = ExampleLink.trefoil()
print(k.brief(), k.jones())
print(k.knowsJones())
k.resolve(k.crossing(0))
print(k.knowsJones())
print(k.brief(), k.jones())
print()

# Operations that should preserve topological properties:

k = ExampleLink.trefoil()
print(k.brief(), k.jones())
print(k.knowsJones())
tmp = k.r1(k.component(0), 1, 1)
print(k.knowsJones())
print(k.brief(), k.jones())
print()

k = ExampleLink.trefoil()
print(k.brief(), k.jones())
print(k.knowsJones())
k.rotate()
print(k.knowsJones())
print(k.brief(), k.jones())
print()

# Operations that should preserve properties:

k = ExampleLink.trefoil()
l = ExampleLink.whitehead()
print(k.brief(), k.jones())
print(l.brief(), l.jones())
print(k.knowsJones(), l.knowsJones())
k.swap(l)
print(k.knowsJones(), l.knowsJones())
print(k.brief(), k.jones())
print(l.brief(), l.jones())
print()

# Verify that ChangeAndClearSpan<CHANGE_PRESERVE_TOPOLOGY> clears the
# topology lock:

k = ExampleLink.trefoil()
print(k.brief(), k.jones())
print(k.knowsJones())
tmp = k.r1(k.component(0), 1, 1)
print(k.knowsJones())
print(k.brief(), k.jones())
print(k.knowsJones())
k.changeAll()
print(k.knowsJones())
print(k.brief(), k.jones())
print()

# ----- Triangulations -----

# Operations that should clear all properties:

t = Example3.weeks()
print(t.isoSig(), t.homology())
tmp = t.insertLayeredSolidTorus(2,3)
print(t.isoSig(), t.homology())
print()

t = Example3.weeks()
print(t.isoSig(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
t.connectedSumWith(Example3.lens(3,1))
print(t.knowsIrreducible())
print(t.isoSig(), t.isIrreducible(), t.homology())
print()

# Operations that should preserve topological properties:

t = Example3.weeks()
print(t.isoSig(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
tmp = t.pachner(t.triangle(0))
print(t.knowsIrreducible())
print(t.isoSig(), t.isIrreducible(), t.homology())
print()

t = Example3.weeks()
print(t.isoSig(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
tmp = t.fourFourMove(t.edge(0), 0)
print(t.knowsIrreducible())
print(t.isoSig(), t.isIrreducible(), t.homology())
print()

t = Example3.weeks()
print(t.tightEncoding(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
t.reorderBFS(True)
print(t.knowsIrreducible())
print(t.tightEncoding(), t.isIrreducible(), t.homology())
print()

# Operations that should preserve all properties:

t = Example3.lens(3,1)
u = Example3.lens(0,1)
print(t.isoSig(), t.isIrreducible())
print(u.isoSig(), u.isIrreducible())
print(t.knowsIrreducible(), u.knowsIrreducible())
t.swap(u)
print(t.knowsIrreducible(), u.knowsIrreducible())
print(t.isoSig(), t.isIrreducible())
print(u.isoSig(), u.isIrreducible())
print()

# Verify that ChangeAndClearSpan<CHANGE_PRESERVE_TOPOLOGY> clears the
# topology lock:

t = Example3.weeks()
print(t.isoSig(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
tmp = t.pachner(t.triangle(0))
print(t.knowsIrreducible())
print(t.isoSig(), t.isIrreducible(), t.homology())
print(t.knowsIrreducible())
t.connectedSumWith(Example3.lens(3,1))
print(t.knowsIrreducible())
print(t.isoSig(), t.isIrreducible(), t.homology())
print()

