# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests the Python repr() output for some of Regina's classes.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

def dump(x):
	print(x.__class__.__name__)
	print(str(x))
	print(repr(x))
	print()

dump(Integer(-5))
dump(LargeInteger(9))
dump(LargeInteger.infinity)
dump(Rational(3,8))

m = Matrix2(1,2,3,4)
dump(m)
dump(m[1])

dump(Example3.weberSeifert().homology())
dump(Example3.weberSeifert().markedHomology())

g = Example3.poincare().fundamentalGroup()
dump(g)
dump(g.relation(0))
dump(g.relation(0).term(2))

b = Bitmask(5)
b.set(3, True)
dump(b)

b = Bitmask8()
b.set(3, True)
dump(b)

q = Qitmask8()
q.set(3, 2)
dump(q)

dump(BoolSet(True))
dump(DiscType(7,3))
dump(DiscSpec(1,3,2))
dump(PrismSpec(5,1))
dump(FacetSpec3(6,2))
dump(FacePair(1,3))
dump(SFSFibre(5,-2))

t = Example3.poincare()
dump(t.turaevViro(5))
dump(t.turaevViro(5).polynomial())

g = ModelLinkGraph.fromPlantri('bcdd,aeec,abfd,acfa,bffb,ceed')
dump(g.node(0).arc(2))

l = Link(1)
dump(l.component(0))
l = ExampleLink.figureEight()
dump(l.component(0))
dump(l.jones())
dump(l.homfly())

t = Example2.annulus()
dump(t.vertex(0).front())
dump(t.edge(0).front())

t = Example3.poincare()
dump(t.vertex(0).front())
dump(t.edge(0).front())
dump(t.triangle(0).front())

t = Example4.cappellShaneson()
dump(t.vertex(0).front())
dump(t.edge(0).front())
dump(t.triangle(0).front())
dump(t.tetrahedron(0).front())

t = Example5.sphere()
dump(t.vertex(0).front())
dump(t.edge(0).front())
dump(t.triangle(0).front())
dump(t.tetrahedron(0).front())
dump(t.pentachoron(0).front())

