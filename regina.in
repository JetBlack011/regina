#!/bin/sh
#
# Regina - A Normal Surface Theory Calculator
# Main Startup Script
#
# Copyright (c) 2002-2003, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# DO NOT EDIT THIS FILE DIRECTLY.  It has been automatically generated
# by configure and any changes will be overwritten.  Try editing regina.in
# instead.
#
set -e

# --- Diagnostic output routines. ---

# Send the given error message to stderr.
# Usage: error <message>
error () {
  echo "$1" 1>&2
}

# Send the given warning message to stderr if $REGINA_VERBOSITY >= 1.
# Usage: warn <message>
warn () {
  if [ 1 -le "$REGINA_VERBOSITY" ]; then
    echo "$1" 1>&2
  fi
}

# Send the given information message to stderr if $REGINA_VERBOSITY >= 2.
# Usage: info <message>
info () {
  if [ 2 -le "$REGINA_VERBOSITY" ]; then
    echo "$1" 1>&2
  fi
}

# --- Determine which platform we're running on. ---

if [ -z "$OSTYPE" ]; then
  if [ -e /usr/bin/cygpath.exe ]; then
    export OSTYPE=cygwin
  else
    export OSTYPE=`uname -s`
  fi
fi

# --- Base Regina directory and package name. ---

# Variables set:
#
#   REGINA_HOME: See reference manual; this is only set if it's not already
#                in the environment.
#   REGINA_PACKAGE: The package name for the Regina installation we are using.
#   REGINA_PKGLIBDIR: The directory in which the JNI calculation engine has
#                     been (or will be) installed.
#   REGINA_FROMSOURCE: 1 if we're running directly from the source tree,
#                      0 if we're running from an installation.

prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@
libdir=@libdir@

# Are we running directly from the source tree?
if [ -f "`dirname "$0"`/regina.in" -a -f "`dirname "$0"`/admin/ac_gen" ]; then
  export REGINA_FROMSOURCE=1
  export REGINA_PACKAGE="regina"
  default_regina_home="`dirname "$0"`"
else
  export REGINA_FROMSOURCE=0
  export REGINA_PACKAGE="@PACKAGE@"
  default_regina_home="$datadir/@PACKAGE@"
fi
export REGINA_PKGLIBDIR="$libdir/@PACKAGE@"

# Derive REGINA_HOME if nothing is specified.
if [ -z "$REGINA_HOME" ]; then
  export REGINA_HOME="$default_regina_home"
fi

# Check REGINA_HOME is an appropriate value.
if [ ! -f "$REGINA_HOME/scripts/regscript_misc" ]; then
  error "Error: \$REGINA_HOME should be set to the base Regina directory."
  error "       This is the directory containing the \"scripts\" subdirectory,"
  error "       the \"icons\" subdirectory and so on."
  error "       It is currently set to $REGINA_HOME."
  exit 1
fi

# --- Check command-line verbosity. ---

for i; do
  if [ "$i" = "--verbose" -o "$i" = "-v" ]; then
    export REGINA_VERBOSITY=2
  elif [ "$i" = "--quiet" -o "$i" = "-q" ]; then
    export REGINA_VERBOSITY=0
  fi
done

# --- Miscellaneous functions and variables (including default verbosity). ---

. "$REGINA_HOME/scripts/regscript_misc"

# Now we have established our verbosity level, output $REGINA_HOME if
# appropriate.
info "-- Regina home directory (REGINA_HOME): $REGINA_HOME"

# --- Read runtime options. ---

. "$REGINA_HOME/scripts/regscript_opt"

# --- Convert filenames if necessary for cygwin.

if [ "$OSTYPE" = "cygwin" ]; then
  # We'll do this carefully because the windows paths will
  # contain backslashes.

  # Options that are single filenames:
  for i in REGINA_OPTIONS_LOCAL REGINA_BTOOLS REGINA_JYTHON REGINA_JAVAHELP REGINA_JARDIR REGINA_CACHEDIR; do
    if ( eval "[ ! -z \"\$$i\" ]" ); then
      eval 'export '"$i"'="`cygpath -aw "$'"$i"'"`"'
    fi
  done

  # Options that are colon-separated lists of filenames:
  optioncmds="`( \
    echo "REGINA_JNIDIR=$REGINA_JNIDIR"; \
    echo "REGINA_EXTRA_CLASSES=$REGINA_EXTRA_CLASSES"; \
  ) | awk -f "$REGINA_HOME/scripts/regscript_expandlist"`"
  eval $optioncmds;
fi

# --- Set the classpath. ---

reginaclasses=""
for i in "$REGINA_JARDIR"/*.jar; do
  reginaclasses="$reginaclasses$cps$i";
done

export CLASSPATH="$reginaclasses$cps$REGINA_BTOOLS$cps$REGINA_JYTHON$cps$REGINA_JAVAHELP$cps$REGINA_EXTRA_CLASSES$cps$CLASSPATH"

# --- Set the Java defines. ---

addjavadef () {
  eval "javadefs=\"\$javadefs \\\"-D$1=\$$1\\\"\""
}

javadefs="\"-Djava.library.path=$REGINA_JNIDIR\""
if [ ! -z "$REGINA_CACHEDIR" ]; then
  javadefs="$javadefs \"-Dpython.cachedir=$REGINA_CACHEDIR\""
fi

addjavadef "REGINA_OPTIONS_LOCAL"

for i in REGINA_ENGINE REGINA_INTERFACE REGINA_JNIENGINE; do
  if ( eval "[ ! -z \"\$$i\" ]" ); then
    addjavadef $i
  fi
done

# --- Run the application. ---

command="$REGINA_JAVA $javadefs normal.Application"

info "Command: $command"
info "Classpath: $CLASSPATH"

if ! ( eval $command '"$@"' ); then
  error
  error "################################"
  error "#                              #"
  error "#            REGINA            #"
  error "#                              #"
  error "#  Could not run application!  #"
  error "#                              #"
  error "################################"
  error
  error "An error occurred whilst trying to run the application.  Use:"
  error
  error "    $0 --verbose"
  error
  error "to see more diagnostic output such as the runtime options"
  error "that are being used.  You may wish to verify that these"
  error "options are correct and edit the runtime options file(s)"
  error "if appropriate."
  error
  error "If you still can't run the application, mail $support"
  error "for assistance."
  error
  exit 1
fi
